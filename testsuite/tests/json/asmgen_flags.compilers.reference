{"clambda":
    "(seq\n  (let (kas/80 = (function a/82 1a))\n    (setfield_ptr(root-init) 0 (global Asmgen_flags!) kas/80))\n  0a)\n",
 "dump_clambda":
    "\nclambda:\n(seq\n  (let (kas/80 (closure  (fun camlAsmgen_flags__kas_80 1  a/82 1a) ))\n    (setfield_ptr(root-init) 0 (read_symbol camlAsmgen_flags) kas/80))\n  0a)\n\n",
 "dump_combine":
    ["*** After allocation combining\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  V/32 := val[clos/31 + 8]\n  { + V/32}\n  if V/32 ==s 5 then\n    { + clos/31}\n    V/36 := val[clos/31 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    { + clos/31}\n    V/33 := val[clos/31]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/31}\n    R/1[%rbx] := clos/31\n    { + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    { + clos/34}\n    V/35 := val[clos/34]\n    { + arg/30}\n    R/0[%rax] := arg/30\n    { + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After allocation combining\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  V/33 := val[clos/32 + 8]\n  { + V/33}\n  if V/33 ==s 7 then\n    { + clos/32}\n    V/39 := val[clos/32 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + arg/31}\n    R/2[%rdi] := arg/31\n    { + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    { + clos/32}\n    V/34 := val[clos/32]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/32}\n    R/1[%rbx] := clos/32\n    { + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    { + clos/35}\n    V/36 := val[clos/35]\n    { + arg/30}\n    R/0[%rax] := arg/30\n    { + clos/35}\n    R/1[%rbx] := clos/35\n    { + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    { + clos/37}\n    V/38 := val[clos/37]\n    { + arg/31}\n    R/0[%rax] := arg/31\n    { + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After allocation combining\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/30}\n  V/32 := val[clos/30 + 16]\n  { + clos/31}\n  V/33 := val[clos/31 + 16]\n  { + V/32}\n  R/0[%rax] := V/32\n  { + arg/29}\n  R/1[%rbx] := arg/29\n  { + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After allocation combining\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry2_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/30}\n  V/33 := val[clos/30 + 16]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + V/33}\n  R/1[%rbx] := V/33\n  { + arg/29}\n  R/2[%rdi] := arg/29\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After allocation combining\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry3_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/31}\n  V/33 := val[clos/31 + 24]\n  { + clos/32}\n  V/34 := val[clos/32 + 16]\n  { + V/33}\n  R/0[%rax] := V/33\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After allocation combining\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry3_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry3_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/30}\n  V/34 := val[clos/30 + 16]\n  { + clos/31}\n  V/35 := val[clos/31 + 24]\n  { + clos/32}\n  V/36 := val[clos/32 + 24]\n  { + clos/33}\n  V/37 := val[clos/33 + 16]\n  { + V/36}\n  R/0[%rax] := V/36\n  { + V/35}\n  R/1[%rbx] := V/35\n  { + V/34}\n  R/2[%rdi] := V/34\n  { + arg/29}\n  R/3[%rsi] := arg/29\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After allocation combining\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry4_3\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 24]\n  { + clos/33}\n  V/36 := val[clos/33 + 16]\n  { + V/35}\n  R/0[%rax] := V/35\n  { + V/34}\n  R/1[%rbx] := V/34\n  { + arg3/29}\n  R/2[%rdi] := arg3/29\n  { + arg4/30}\n  R/3[%rsi] := arg4/30\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After allocation combining\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry4_2_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/32}\n  V/34 := val[clos/32 + 24]\n  { + clos/33}\n  V/35 := val[clos/33 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + arg4/31}\n  R/3[%rsi] := arg4/31\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After allocation combining\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 7 (init)\n  {}\n  I/33 := \"caml_curry4_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  { + R/0[%rax]}\n  a/29 := R/0[%rax]\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After allocation combining\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_cse":
    ["*** After CSE\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  V/32 := val[clos/31 + 8]\n  { + V/32}\n  if V/32 ==s 5 then\n    { + clos/31}\n    V/36 := val[clos/31 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    { + clos/31}\n    V/33 := val[clos/31]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/31}\n    R/1[%rbx] := clos/31\n    { + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    { + clos/34}\n    V/35 := val[clos/34]\n    { + arg/30}\n    R/0[%rax] := arg/30\n    { + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After CSE\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  V/33 := val[clos/32 + 8]\n  { + V/33}\n  if V/33 ==s 7 then\n    { + clos/32}\n    V/39 := val[clos/32 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + arg/31}\n    R/2[%rdi] := arg/31\n    { + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    { + clos/32}\n    V/34 := val[clos/32]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/32}\n    R/1[%rbx] := clos/32\n    { + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    { + clos/35}\n    V/36 := val[clos/35]\n    { + arg/30}\n    R/0[%rax] := arg/30\n    { + clos/35}\n    R/1[%rbx] := clos/35\n    { + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    { + clos/37}\n    V/38 := val[clos/37]\n    { + arg/31}\n    R/0[%rax] := arg/31\n    { + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After CSE\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/30}\n  V/32 := val[clos/30 + 16]\n  { + clos/31}\n  V/33 := val[clos/31 + 16]\n  { + V/32}\n  R/0[%rax] := V/32\n  { + arg/29}\n  R/1[%rbx] := arg/29\n  { + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After CSE\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry2_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/30}\n  V/33 := val[clos/30 + 16]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + V/33}\n  R/1[%rbx] := V/33\n  { + arg/29}\n  R/2[%rdi] := arg/29\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After CSE\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry3_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/31}\n  V/33 := val[clos/31 + 24]\n  { + clos/32}\n  V/34 := val[clos/32 + 16]\n  { + V/33}\n  R/0[%rax] := V/33\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After CSE\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry3_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry3_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/30}\n  V/34 := val[clos/30 + 16]\n  { + clos/31}\n  V/35 := val[clos/31 + 24]\n  { + clos/32}\n  V/36 := val[clos/32 + 24]\n  { + clos/33}\n  V/37 := val[clos/33 + 16]\n  { + V/36}\n  R/0[%rax] := V/36\n  { + V/35}\n  R/1[%rbx] := V/35\n  { + V/34}\n  R/2[%rdi] := V/34\n  { + arg/29}\n  R/3[%rsi] := arg/29\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After CSE\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry4_3\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 24]\n  { + clos/33}\n  V/36 := val[clos/33 + 16]\n  { + V/35}\n  R/0[%rax] := V/35\n  { + V/34}\n  R/1[%rbx] := V/34\n  { + arg3/29}\n  R/2[%rdi] := arg3/29\n  { + arg4/30}\n  R/3[%rsi] := arg4/30\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After CSE\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry4_2_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/32}\n  V/34 := val[clos/32 + 24]\n  { + clos/33}\n  V/35 := val[clos/33 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + arg4/31}\n  R/3[%rsi] := arg4/31\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After CSE\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 7 (init)\n  {}\n  I/33 := \"caml_curry4_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  { + R/0[%rax]}\n  a/29 := R/0[%rax]\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After CSE\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_interval":
    ["*** Intervals\nR/2[%rdi]: [2;6] [19;20]\nR/1[%rbx]: [2;4] [17;20] [31;32] [43;44]\nR/0[%rax]: [2;2] [15;20] [29;34] [41;44]\narg/29: [3;14] [24;28]\narg/30: [5;16] [24;24]\nclos/31: [7;18] [24;30]\nV/32: [9;10]\nV/36: [13;20]\nspilled-arg/37: [25;38]\nV/33: [27;32]\nclos/34: [35;42]\nV/35: [37;44]\narg/38: [39;40]\n\n",
     "*** Intervals\nR/3[%rsi]: [2;8] [23;24]\nR/2[%rdi]: [2;6] [21;24]\nR/1[%rbx]: [2;4] [19;24] [37;38] [49;50] [61;62]\nR/0[%rax]: [2;2] [17;24] [35;40] [47;52] [59;62]\narg/29: [3;16] [28;34]\narg/30: [5;18] [28;30]\narg/31: [7;20] [28;28]\nclos/32: [9;22] [28;36]\nV/33: [11;12]\nV/39: [15;24]\nspilled-arg/40: [29;56]\nspilled-arg/41: [31;44]\nV/34: [33;38]\nclos/35: [41;48]\nV/36: [43;50]\narg/42: [45;46]\nclos/37: [53;60]\nV/38: [55;62]\narg/43: [57;58]\n\n",
     "*** Intervals\nR/2[%rdi]: [17;18]\nR/1[%rbx]: [2;4] [15;18]\nR/0[%rax]: [2;2] [13;18]\narg/29: [3;14]\nclos/30: [5;8]\nclos/31: [7;16]\nV/32: [9;12]\nV/33: [11;18]\n\n",
     "*** Intervals\nR/11[%r11]: [7;7]\nR/10[%r10]: [7;7]\nR/1[%rbx]: [2;4]\nR/0[%rax]: [2;2] [21;22]\narg/29: [3;16]\nclos/30: [5;18]\nV/31: [7;20]\nI/32: [11;12]\n\n",
     "*** Intervals\nR/3[%rsi]: [23;24]\nR/2[%rdi]: [21;24]\nR/1[%rbx]: [2;4] [19;24]\nR/0[%rax]: [2;2] [17;24]\narg/29: [3;20]\nclos/30: [5;10]\nclos/31: [7;12]\nclos/32: [9;22]\nV/33: [11;18]\nV/34: [13;16]\nV/35: [15;24]\n\n",
     "*** Intervals\nR/11[%r11]: [7;7]\nR/10[%r10]: [7;7]\nR/1[%rbx]: [2;4]\nR/0[%rax]: [2;2] [21;22]\narg/29: [3;16]\nclos/30: [5;18]\nV/31: [7;20]\nI/32: [11;12]\n\n",
     "*** Intervals\nR/3[%rsi]: [21;22]\nR/2[%rdi]: [2;6] [19;22]\nR/1[%rbx]: [2;4] [17;22]\nR/0[%rax]: [2;2] [15;22]\narg2/29: [3;16]\narg3/30: [5;18]\nclos/31: [7;10]\nclos/32: [9;20]\nV/33: [11;14]\nV/34: [13;22]\n\n",
     "*** Intervals\nR/11[%r11]: [7;7]\nR/10[%r10]: [7;7]\nR/1[%rbx]: [2;4]\nR/0[%rax]: [2;2] [25;26]\narg/29: [3;20]\nclos/30: [5;22]\nV/31: [7;24]\nI/32: [11;12]\nI/33: [17;18]\n\n",
     "*** Intervals\nR/4[%rdx]: [29;30]\nR/3[%rsi]: [27;30]\nR/2[%rdi]: [25;30]\nR/1[%rbx]: [2;4] [23;30]\nR/0[%rax]: [2;2] [21;30]\narg/29: [3;26]\nclos/30: [5;12]\nclos/31: [7;14]\nclos/32: [9;16]\nclos/33: [11;28]\nV/34: [13;24]\nV/35: [15;22]\nV/36: [17;20]\nV/37: [19;30]\n\n",
     "*** Intervals\nR/11[%r11]: [7;7]\nR/10[%r10]: [7;7]\nR/1[%rbx]: [2;4]\nR/0[%rax]: [2;2] [21;22]\narg/29: [3;16]\nclos/30: [5;18]\nV/31: [7;20]\nI/32: [11;12]\n\n",
     "*** Intervals\nR/4[%rdx]: [27;28]\nR/3[%rsi]: [25;28]\nR/2[%rdi]: [2;6] [23;28]\nR/1[%rbx]: [2;4] [21;28]\nR/0[%rax]: [2;2] [19;28]\narg3/29: [3;22]\narg4/30: [5;24]\nclos/31: [7;12]\nclos/32: [9;14]\nclos/33: [11;26]\nV/34: [13;20]\nV/35: [15;18]\nV/36: [17;28]\n\n",
     "*** Intervals\nR/11[%r11]: [7;7]\nR/10[%r10]: [7;7]\nR/1[%rbx]: [2;4]\nR/0[%rax]: [2;2] [25;26]\narg/29: [3;20]\nclos/30: [5;22]\nV/31: [7;24]\nI/32: [11;12]\nI/33: [17;18]\n\n",
     "*** Intervals\nR/4[%rdx]: [25;26]\nR/3[%rsi]: [2;8] [23;26]\nR/2[%rdi]: [2;6] [21;26]\nR/1[%rbx]: [2;4] [19;26]\nR/0[%rax]: [2;2] [17;26]\narg2/29: [3;18]\narg3/30: [5;20]\narg4/31: [7;22]\nclos/32: [9;12]\nclos/33: [11;24]\nV/34: [13;16]\nV/35: [15;26]\n\n",
     "*** Intervals\nR/11[%r11]: [7;7]\nR/10[%r10]: [7;7]\nR/1[%rbx]: [2;4]\nR/0[%rax]: [2;2] [25;26]\narg/29: [3;20]\nclos/30: [5;22]\nV/31: [7;24]\nI/32: [11;12]\nI/33: [17;18]\n\n",
     "*** Intervals\nR/0[%rax]: [29;30]\nI/29: [5;6]\nI/30: [11;12]\nI/31: [17;18]\nI/32: [23;24]\nI/33: [27;28]\n\n",
     "*** Intervals\nR/0[%rax]: [5;6]\nI/30: [3;4]\n\n",
     "*** Intervals\nR/0[%rax]: [11;12]\nkas/29: [3;6]\nI/30: [5;6]\nI/31: [9;10]\n\n"
    ],
 "dump_linear":
    ["*** Linearized code\ncaml_apply2:\n  prologue\n  L153:\n  V/32[%rsi] := val[clos/31[%rdi] + 8]\n  if V/32[%rsi] !=s 5 goto L152\n  V/36[%rsi] := val[clos/31[%rdi] + 16]\n  tailcall V/36[%rsi] R/0[%rax] R/1[%rbx] R/2[%rdi]\n  L152:\n  spilled-arg/37[s0] := arg/30[%rbx] (spill)\n  V/33[%rsi] := val[clos/31[%rdi]]\n  R/1[%rbx] := clos/31[%rdi]\n  {spilled-arg/37[s0]*}\n  R/0[%rax] := call V/33[%rsi] R/0[%rax] R/1[%rbx]\n  clos/34[%rbx] := R/0[%rax]\n  V/35[%rdi] := val[clos/34[%rbx]]\n  arg/38[%rax] := spilled-arg/37[s0] (reload)\n  tailcall V/35[%rdi] R/0[%rax] R/1[%rbx]\n  \n",
     "*** Linearized code\ncaml_apply3:\n  prologue\n  L148:\n  V/33[%rdx] := val[clos/32[%rsi] + 8]\n  if V/33[%rdx] !=s 7 goto L147\n  V/39[%rdx] := val[clos/32[%rsi] + 16]\n  tailcall V/39[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  L147:\n  spilled-arg/40[s0] := arg/31[%rdi] (spill)\n  spilled-arg/41[s1] := arg/30[%rbx] (spill)\n  V/34[%rdi] := val[clos/32[%rsi]]\n  R/1[%rbx] := clos/32[%rsi]\n  {spilled-arg/40[s0]* spilled-arg/41[s1]*}\n  R/0[%rax] := call V/34[%rdi] R/0[%rax] R/1[%rbx]\n  clos/35[%rbx] := R/0[%rax]\n  V/36[%rdi] := val[clos/35[%rbx]]\n  arg/42[%rax] := spilled-arg/41[s1] (reload)\n  {spilled-arg/40[s0]*}\n  R/0[%rax] := call V/36[%rdi] R/0[%rax] R/1[%rbx]\n  clos/37[%rbx] := R/0[%rax]\n  V/38[%rdi] := val[clos/37[%rbx]]\n  arg/43[%rax] := spilled-arg/40[s0] (reload)\n  tailcall V/38[%rdi] R/0[%rax] R/1[%rbx]\n  \n",
     "*** Linearized code\ncaml_curry2_1:\n  L142:\n  arg/29[%rdi] := R/0[%rax]\n  clos/30[%rax] := R/1[%rbx]\n  clos/31[%rsi] := val[clos/30[%rax] + 24]\n  V/32[%rax] := val[clos/30[%rax] + 16]\n  V/33[%rdx] := val[clos/31[%rsi] + 16]\n  R/1[%rbx] := arg/29[%rdi]\n  R/2[%rdi] := clos/31[%rsi]\n  tailcall V/33[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi]\n  \n",
     "*** Linearized code\ncaml_curry2:\n  prologue\n  L137:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  [V/31[%rdi] + -8] := 4343 (init)\n  I/32[%rsi] := \"caml_curry2_1\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 3 (init)\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncaml_curry3_2:\n  L136:\n  arg/29[%rdi] := R/0[%rax]\n  clos/30[%rax] := R/1[%rbx]\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  clos/32[%rsi] := val[clos/31[%rbx] + 32]\n  V/33[%rdx] := val[clos/30[%rax] + 16]\n  V/34[%rax] := val[clos/31[%rbx] + 24]\n  V/35[%rcx] := val[clos/32[%rsi] + 16]\n  R/1[%rbx] := V/33[%rdx]\n  tailcall V/35[%rcx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  \n",
     "*** Linearized code\ncaml_curry3_1:\n  prologue\n  L131:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  [V/31[%rdi] + -8] := 4343 (init)\n  I/32[%rsi] := \"caml_curry3_2\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 3 (init)\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncaml_curry3_1_app:\n  L130:\n  arg2/29[%rsi] := R/0[%rax]\n  arg3/30[%rdx] := R/1[%rbx]\n  clos/31[%rax] := R/2[%rdi]\n  clos/32[%rcx] := val[clos/31[%rax] + 32]\n  V/33[%rax] := val[clos/31[%rax] + 24]\n  V/34[%r8] := val[clos/32[%rcx] + 16]\n  R/1[%rbx] := arg2/29[%rsi]\n  R/2[%rdi] := arg3/30[%rdx]\n  R/3[%rsi] := clos/32[%rcx]\n  tailcall V/34[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  \n",
     "*** Linearized code\ncaml_curry3:\n  prologue\n  L125:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  [V/31[%rdi] + -8] := 5367 (init)\n  I/32[%rsi] := \"caml_curry3_1\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 5 (init)\n  I/33[%rsi] := \"caml_curry3_1_app\"\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncaml_curry4_3:\n  L124:\n  arg/29[%rsi] := R/0[%rax]\n  clos/30[%rax] := R/1[%rbx]\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  clos/32[%rdi] := val[clos/31[%rbx] + 32]\n  clos/33[%rdx] := val[clos/32[%rdi] + 32]\n  V/34[%rcx] := val[clos/30[%rax] + 16]\n  V/35[%rbx] := val[clos/31[%rbx] + 24]\n  V/36[%rax] := val[clos/32[%rdi] + 24]\n  V/37[%r8] := val[clos/33[%rdx] + 16]\n  R/2[%rdi] := V/34[%rcx]\n  tailcall V/37[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n  \n",
     "*** Linearized code\ncaml_curry4_2:\n  prologue\n  L119:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  [V/31[%rdi] + -8] := 4343 (init)\n  I/32[%rsi] := \"caml_curry4_3\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 3 (init)\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncaml_curry4_2_app:\n  L118:\n  arg3/29[%rsi] := R/0[%rax]\n  arg4/30[%rdx] := R/1[%rbx]\n  clos/31[%rax] := R/2[%rdi]\n  clos/32[%rbx] := val[clos/31[%rax] + 32]\n  clos/33[%rcx] := val[clos/32[%rbx] + 32]\n  V/34[%rdi] := val[clos/31[%rax] + 24]\n  V/35[%rax] := val[clos/32[%rbx] + 24]\n  V/36[%r8] := val[clos/33[%rcx] + 16]\n  R/1[%rbx] := V/34[%rdi]\n  R/2[%rdi] := arg3/29[%rsi]\n  R/3[%rsi] := arg4/30[%rdx]\n  R/4[%rdx] := clos/33[%rcx]\n  tailcall V/36[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n  \n",
     "*** Linearized code\ncaml_curry4_1:\n  prologue\n  L113:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  [V/31[%rdi] + -8] := 5367 (init)\n  I/32[%rsi] := \"caml_curry4_2\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 5 (init)\n  I/33[%rsi] := \"caml_curry4_2_app\"\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncaml_curry4_1_app:\n  L112:\n  arg2/29[%rdx] := R/0[%rax]\n  arg3/30[%rcx] := R/1[%rbx]\n  arg4/31[%r8] := R/2[%rdi]\n  clos/32[%rax] := R/3[%rsi]\n  clos/33[%r9] := val[clos/32[%rax] + 32]\n  V/34[%rax] := val[clos/32[%rax] + 24]\n  V/35[%r12] := val[clos/33[%r9] + 16]\n  R/1[%rbx] := arg2/29[%rdx]\n  R/2[%rdi] := arg3/30[%rcx]\n  R/3[%rsi] := arg4/31[%r8]\n  R/4[%rdx] := clos/33[%r9]\n  tailcall V/35[%r12] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n  \n",
     "*** Linearized code\ncaml_curry4:\n  prologue\n  L107:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  [V/31[%rdi] + -8] := 5367 (init)\n  I/32[%rsi] := \"caml_curry4_1\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 7 (init)\n  I/33[%rsi] := \"caml_curry4_1_app\"\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncaml_program:\n  prologue\n  L106:\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  I/29[%rax] := \"caml_globals_inited\"\n  [I/29[%rax]] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  I/30[%rax] := \"caml_globals_inited\"\n  [I/30[%rax]] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  I/31[%rax] := \"caml_globals_inited\"\n  [I/31[%rax]] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  I/32[%rax] := \"caml_globals_inited\"\n  [I/32[%rax]] +:= 1\n  I/33[%rax] := 1\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncamlAsmgen_flags__kas_80: {asmgen_flags.ml:6,8-34}\n  L100:\n  I/30[%rax] := 3\n  return R/0[%rax]\n  \n",
     "*** Linearized code\ncamlAsmgen_flags__entry:\n  L101:\n  kas/29[%rax] := \"camlAsmgen_flags__1\"\n  I/30[%rbx] := \"camlAsmgen_flags\"\n  val[I/30[%rbx]] := kas/29[%rax] (init)\n  I/31[%rax] := 1\n  return R/0[%rax]\n  \n"
    ],
 "dump_live":
    ["*** Liveness analysis\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {R/2[%rdi] arg/29* + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  {arg/29* arg/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg/29* arg/30* clos/31* + clos/31}\n  V/32 := val[clos/31 + 8]\n  {arg/29* arg/30* clos/31* + V/32}\n  if V/32 ==s 5 then\n    {arg/29* arg/30* clos/31* + clos/31}\n    V/36 := val[clos/31 + 16]\n    {arg/30* clos/31* V/36* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] clos/31* V/36* + arg/30}\n    R/1[%rbx] := arg/30\n    {R/0[%rax] R/1[%rbx] V/36* + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    {arg/29* clos/31* + arg/30}\n    spilled-arg/37 := arg/30 (spill)\n    {arg/29* clos/31* spilled-arg/37* + clos/31}\n    V/33 := val[clos/31]\n    {clos/31* V/33* spilled-arg/37* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] V/33* spilled-arg/37* + clos/31}\n    R/1[%rbx] := clos/31\n    {spilled-arg/37* + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    {spilled-arg/37* + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    {clos/34* spilled-arg/37* + clos/34}\n    V/35 := val[clos/34]\n    {clos/34* V/35* + spilled-arg/37}\n    arg/38 := spilled-arg/37 (reload)\n    {clos/34* V/35* + arg/38}\n    R/0[%rax] := arg/38\n    {R/0[%rax] V/35* + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** Liveness analysis\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {R/2[%rdi] arg/29* + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  {arg/29* arg/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg/29* arg/30* clos/31* + clos/31}\n  V/32 := val[clos/31 + 8]\n  {arg/29* arg/30* clos/31* + V/32}\n  if V/32 ==s 5 then\n    {arg/29* arg/30* clos/31* + clos/31}\n    V/36 := val[clos/31 + 16]\n    {arg/30* clos/31* V/36* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] clos/31* V/36* + arg/30}\n    R/1[%rbx] := arg/30\n    {R/0[%rax] R/1[%rbx] V/36* + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    {arg/29* arg/30* clos/31* + clos/31}\n    V/33 := val[clos/31]\n    {arg/30* clos/31* V/33* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] arg/30* V/33* + clos/31}\n    R/1[%rbx] := clos/31\n    {arg/30* + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    {arg/30* + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    {arg/30* clos/34* + clos/34}\n    V/35 := val[clos/34]\n    {clos/34* V/35* + arg/30}\n    R/0[%rax] := arg/30\n    {R/0[%rax] V/35* + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** Liveness analysis\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg/29* + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  {R/3[%rsi] arg/29* arg/30* + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  {arg/29* arg/30* arg/31* + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  {arg/29* arg/30* arg/31* clos/32* + clos/32}\n  V/33 := val[clos/32 + 8]\n  {arg/29* arg/30* arg/31* clos/32* + V/33}\n  if V/33 ==s 7 then\n    {arg/29* arg/30* arg/31* clos/32* + clos/32}\n    V/39 := val[clos/32 + 16]\n    {arg/30* arg/31* clos/32* V/39* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] arg/31* clos/32* V/39* + arg/30}\n    R/1[%rbx] := arg/30\n    {R/0[%rax] R/1[%rbx] clos/32* V/39* + arg/31}\n    R/2[%rdi] := arg/31\n    {R/0[%rax] R/1[%rbx] R/2[%rdi] V/39* + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    {arg/29* arg/30* clos/32* + arg/31}\n    spilled-arg/40 := arg/31 (spill)\n    {arg/29* clos/32* spilled-arg/40* + arg/30}\n    spilled-arg/41 := arg/30 (spill)\n    {arg/29* clos/32* spilled-arg/40* spilled-arg/41* + clos/32}\n    V/34 := val[clos/32]\n    {clos/32* V/34* spilled-arg/40* spilled-arg/41* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] V/34* spilled-arg/40* spilled-arg/41* + clos/32}\n    R/1[%rbx] := clos/32\n    {spilled-arg/40* spilled-arg/41* + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    {spilled-arg/40* spilled-arg/41* + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    {clos/35* spilled-arg/40* spilled-arg/41* + clos/35}\n    V/36 := val[clos/35]\n    {clos/35* V/36* spilled-arg/40* + spilled-arg/41}\n    arg/42 := spilled-arg/41 (reload)\n    {clos/35* V/36* spilled-arg/40* + arg/42}\n    R/0[%rax] := arg/42\n    {R/0[%rax] V/36* spilled-arg/40* + clos/35}\n    R/1[%rbx] := clos/35\n    {spilled-arg/40* + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    {spilled-arg/40* + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    {clos/37* spilled-arg/40* + clos/37}\n    V/38 := val[clos/37]\n    {clos/37* V/38* + spilled-arg/40}\n    arg/43 := spilled-arg/40 (reload)\n    {clos/37* V/38* + arg/43}\n    R/0[%rax] := arg/43\n    {R/0[%rax] V/38* + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** Liveness analysis\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg/29* + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  {R/3[%rsi] arg/29* arg/30* + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  {arg/29* arg/30* arg/31* + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  {arg/29* arg/30* arg/31* clos/32* + clos/32}\n  V/33 := val[clos/32 + 8]\n  {arg/29* arg/30* arg/31* clos/32* + V/33}\n  if V/33 ==s 7 then\n    {arg/29* arg/30* arg/31* clos/32* + clos/32}\n    V/39 := val[clos/32 + 16]\n    {arg/30* arg/31* clos/32* V/39* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] arg/31* clos/32* V/39* + arg/30}\n    R/1[%rbx] := arg/30\n    {R/0[%rax] R/1[%rbx] clos/32* V/39* + arg/31}\n    R/2[%rdi] := arg/31\n    {R/0[%rax] R/1[%rbx] R/2[%rdi] V/39* + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    {arg/29* arg/30* arg/31* clos/32* + clos/32}\n    V/34 := val[clos/32]\n    {arg/30* arg/31* clos/32* V/34* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] arg/30* arg/31* V/34* + clos/32}\n    R/1[%rbx] := clos/32\n    {arg/30* arg/31* + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    {arg/30* arg/31* + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    {arg/30* arg/31* clos/35* + clos/35}\n    V/36 := val[clos/35]\n    {arg/31* clos/35* V/36* + arg/30}\n    R/0[%rax] := arg/30\n    {R/0[%rax] arg/31* V/36* + clos/35}\n    R/1[%rbx] := clos/35\n    {arg/31* + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    {arg/31* + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    {arg/31* clos/37* + clos/37}\n    V/38 := val[clos/37]\n    {clos/37* V/38* + arg/31}\n    R/0[%rax] := arg/31\n    {R/0[%rax] V/38* + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** Liveness analysis\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/31* + clos/30}\n  V/32 := val[clos/30 + 16]\n  {arg/29* clos/31* V/32* + clos/31}\n  V/33 := val[clos/31 + 16]\n  {arg/29* clos/31* V/33* + V/32}\n  R/0[%rax] := V/32\n  {R/0[%rax] clos/31* V/33* + arg/29}\n  R/1[%rbx] := arg/29\n  {R/0[%rax] R/1[%rbx] V/33* + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** Liveness analysis\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/31* + clos/30}\n  V/32 := val[clos/30 + 16]\n  {arg/29* clos/31* V/32* + clos/31}\n  V/33 := val[clos/31 + 16]\n  {arg/29* clos/31* V/33* + V/32}\n  R/0[%rax] := V/32\n  {R/0[%rax] clos/31* V/33* + arg/29}\n  R/1[%rbx] := arg/29\n  {R/0[%rax] R/1[%rbx] V/33* + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** Liveness analysis\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry2_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry2_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg/29* clos/31* clos/32* + clos/30}\n  V/33 := val[clos/30 + 16]\n  {arg/29* clos/32* V/33* + clos/31}\n  V/34 := val[clos/31 + 24]\n  {arg/29* clos/32* V/33* V/34* + clos/32}\n  V/35 := val[clos/32 + 16]\n  {arg/29* clos/32* V/33* V/35* + V/34}\n  R/0[%rax] := V/34\n  {R/0[%rax] arg/29* clos/32* V/35* + V/33}\n  R/1[%rbx] := V/33\n  {R/0[%rax] R/1[%rbx] clos/32* V/35* + arg/29}\n  R/2[%rdi] := arg/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/35* + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** Liveness analysis\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg/29* clos/31* clos/32* + clos/30}\n  V/33 := val[clos/30 + 16]\n  {arg/29* clos/32* V/33* + clos/31}\n  V/34 := val[clos/31 + 24]\n  {arg/29* clos/32* V/33* V/34* + clos/32}\n  V/35 := val[clos/32 + 16]\n  {arg/29* clos/32* V/33* V/35* + V/34}\n  R/0[%rax] := V/34\n  {R/0[%rax] arg/29* clos/32* V/35* + V/33}\n  R/1[%rbx] := V/33\n  {R/0[%rax] R/1[%rbx] clos/32* V/35* + arg/29}\n  R/2[%rdi] := arg/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/35* + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** Liveness analysis\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry3_2\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry3_2\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  {R/2[%rdi] arg2/29* + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  {arg2/29* arg3/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg2/29* arg3/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg2/29* arg3/30* clos/32* + clos/31}\n  V/33 := val[clos/31 + 24]\n  {arg2/29* arg3/30* clos/32* V/33* + clos/32}\n  V/34 := val[clos/32 + 16]\n  {arg2/29* arg3/30* clos/32* V/34* + V/33}\n  R/0[%rax] := V/33\n  {R/0[%rax] arg3/30* clos/32* V/34* + arg2/29}\n  R/1[%rbx] := arg2/29\n  {R/0[%rax] R/1[%rbx] clos/32* V/34* + arg3/30}\n  R/2[%rdi] := arg3/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/34* + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** Liveness analysis\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  {R/2[%rdi] arg2/29* + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  {arg2/29* arg3/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg2/29* arg3/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg2/29* arg3/30* clos/32* + clos/31}\n  V/33 := val[clos/31 + 24]\n  {arg2/29* arg3/30* clos/32* V/33* + clos/32}\n  V/34 := val[clos/32 + 16]\n  {arg2/29* arg3/30* clos/32* V/34* + V/33}\n  R/0[%rax] := V/33\n  {R/0[%rax] arg3/30* clos/32* V/34* + arg2/29}\n  R/1[%rbx] := arg2/29\n  {R/0[%rax] R/1[%rbx] clos/32* V/34* + arg3/30}\n  R/2[%rdi] := arg3/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/34* + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** Liveness analysis\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry3_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 5 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry3_1_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry3_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 5 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry3_1_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg/29* clos/30* clos/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg/29* clos/31* clos/32* clos/33* + clos/30}\n  V/34 := val[clos/30 + 16]\n  {arg/29* clos/32* clos/33* V/34* + clos/31}\n  V/35 := val[clos/31 + 24]\n  {arg/29* clos/33* V/34* V/35* + clos/32}\n  V/36 := val[clos/32 + 24]\n  {arg/29* clos/33* V/34* V/35* V/36* + clos/33}\n  V/37 := val[clos/33 + 16]\n  {arg/29* clos/33* V/34* V/35* V/37* + V/36}\n  R/0[%rax] := V/36\n  {R/0[%rax] arg/29* clos/33* V/34* V/37* + V/35}\n  R/1[%rbx] := V/35\n  {R/0[%rax] R/1[%rbx] arg/29* clos/33* V/37* + V/34}\n  R/2[%rdi] := V/34\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/37* + arg/29}\n  R/3[%rsi] := arg/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/37* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** Liveness analysis\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg/29* clos/30* clos/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg/29* clos/31* clos/32* clos/33* + clos/30}\n  V/34 := val[clos/30 + 16]\n  {arg/29* clos/32* clos/33* V/34* + clos/31}\n  V/35 := val[clos/31 + 24]\n  {arg/29* clos/33* V/34* V/35* + clos/32}\n  V/36 := val[clos/32 + 24]\n  {arg/29* clos/33* V/34* V/35* V/36* + clos/33}\n  V/37 := val[clos/33 + 16]\n  {arg/29* clos/33* V/34* V/35* V/37* + V/36}\n  R/0[%rax] := V/36\n  {R/0[%rax] arg/29* clos/33* V/34* V/37* + V/35}\n  R/1[%rbx] := V/35\n  {R/0[%rax] R/1[%rbx] arg/29* clos/33* V/37* + V/34}\n  R/2[%rdi] := V/34\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/37* + arg/29}\n  R/3[%rsi] := arg/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/37* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** Liveness analysis\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_3\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_3\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  {R/2[%rdi] arg3/29* + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  {arg3/29* arg4/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg3/29* arg4/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg3/29* arg4/30* clos/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg3/29* arg4/30* clos/32* clos/33* + clos/31}\n  V/34 := val[clos/31 + 24]\n  {arg3/29* arg4/30* clos/33* V/34* + clos/32}\n  V/35 := val[clos/32 + 24]\n  {arg3/29* arg4/30* clos/33* V/34* V/35* + clos/33}\n  V/36 := val[clos/33 + 16]\n  {arg3/29* arg4/30* clos/33* V/34* V/36* + V/35}\n  R/0[%rax] := V/35\n  {R/0[%rax] arg3/29* arg4/30* clos/33* V/36* + V/34}\n  R/1[%rbx] := V/34\n  {R/0[%rax] R/1[%rbx] arg4/30* clos/33* V/36* + arg3/29}\n  R/2[%rdi] := arg3/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/36* + arg4/30}\n  R/3[%rsi] := arg4/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/36* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** Liveness analysis\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  {R/2[%rdi] arg3/29* + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  {arg3/29* arg4/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg3/29* arg4/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg3/29* arg4/30* clos/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg3/29* arg4/30* clos/32* clos/33* + clos/31}\n  V/34 := val[clos/31 + 24]\n  {arg3/29* arg4/30* clos/33* V/34* + clos/32}\n  V/35 := val[clos/32 + 24]\n  {arg3/29* arg4/30* clos/33* V/34* V/35* + clos/33}\n  V/36 := val[clos/33 + 16]\n  {arg3/29* arg4/30* clos/33* V/34* V/36* + V/35}\n  R/0[%rax] := V/35\n  {R/0[%rax] arg3/29* arg4/30* clos/33* V/36* + V/34}\n  R/1[%rbx] := V/34\n  {R/0[%rax] R/1[%rbx] arg4/30* clos/33* V/36* + arg3/29}\n  R/2[%rdi] := arg3/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/36* + arg4/30}\n  R/3[%rsi] := arg4/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/36* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** Liveness analysis\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_2\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 5 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry4_2_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_2\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 5 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry4_2_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg2/29* + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  {R/3[%rsi] arg2/29* arg3/30* + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  {arg2/29* arg3/30* arg4/31* + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  {arg2/29* arg3/30* arg4/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg2/29* arg3/30* arg4/31* clos/33* + clos/32}\n  V/34 := val[clos/32 + 24]\n  {arg2/29* arg3/30* arg4/31* clos/33* V/34* + clos/33}\n  V/35 := val[clos/33 + 16]\n  {arg2/29* arg3/30* arg4/31* clos/33* V/35* + V/34}\n  R/0[%rax] := V/34\n  {R/0[%rax] arg3/30* arg4/31* clos/33* V/35* + arg2/29}\n  R/1[%rbx] := arg2/29\n  {R/0[%rax] R/1[%rbx] arg4/31* clos/33* V/35* + arg3/30}\n  R/2[%rdi] := arg3/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/35* + arg4/31}\n  R/3[%rsi] := arg4/31\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/35* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** Liveness analysis\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg2/29* + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  {R/3[%rsi] arg2/29* arg3/30* + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  {arg2/29* arg3/30* arg4/31* + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  {arg2/29* arg3/30* arg4/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg2/29* arg3/30* arg4/31* clos/33* + clos/32}\n  V/34 := val[clos/32 + 24]\n  {arg2/29* arg3/30* arg4/31* clos/33* V/34* + clos/33}\n  V/35 := val[clos/33 + 16]\n  {arg2/29* arg3/30* arg4/31* clos/33* V/35* + V/34}\n  R/0[%rax] := V/34\n  {R/0[%rax] arg3/30* arg4/31* clos/33* V/35* + arg2/29}\n  R/1[%rbx] := arg2/29\n  {R/0[%rax] R/1[%rbx] arg4/31* clos/33* V/35* + arg3/30}\n  R/2[%rdi] := arg3/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/35* + arg4/31}\n  R/3[%rsi] := arg4/31\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/35* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** Liveness analysis\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 7 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry4_1_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 7 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry4_1_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {kas/29}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {kas/29}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** Liveness analysis\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_rawclambda":
    "\nclambda:\n(seq\n  (let (kas/80 (closure  (fun camlAsmgen_flags__kas_80 1  a/82 1a) ))\n    (setfield_ptr(root-init) 0 (read_symbol camlAsmgen_flags) kas/80))\n  0a)\n\n",
 "dump_regalloc":
    ["*** After register allocation\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {R/2[%rdi] arg/29[%rax]* + R/1[%rbx]}\n  arg/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* arg/30[%rbx]* + R/2[%rdi]}\n  clos/31[%rdi] := R/2[%rdi]\n  {arg/29[%rax]* arg/30[%rbx]* clos/31[%rdi]* + clos/31[%rdi]}\n  V/32[%rsi] := val[clos/31[%rdi] + 8]\n  {arg/29[%rax]* arg/30[%rbx]* clos/31[%rdi]* + V/32[%rsi]}\n  if V/32[%rsi] ==s 5 then\n    {arg/29[%rax]* arg/30[%rbx]* clos/31[%rdi]* + clos/31[%rdi]}\n    V/36[%rsi] := val[clos/31[%rdi] + 16]\n    {arg/30[%rbx]* clos/31[%rdi]* V/36[%rsi]* + arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] clos/31[%rdi]* V/36[%rsi]* + arg/30[%rbx]}\n    R/1[%rbx] := arg/30[%rbx]\n    {R/0[%rax] R/1[%rbx] V/36[%rsi]* + clos/31[%rdi]}\n    R/2[%rdi] := clos/31[%rdi]\n    { + V/36[%rsi] R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36[%rsi] R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    {arg/29[%rax]* clos/31[%rdi]* + arg/30[%rbx]}\n    spilled-arg/37[s0] := arg/30[%rbx] (spill)\n    {arg/29[%rax]* clos/31[%rdi]* spilled-arg/37[s0]* + clos/31[%rdi]}\n    V/33[%rsi] := val[clos/31[%rdi]]\n    {clos/31[%rdi]* V/33[%rsi]* spilled-arg/37[s0]* + arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] V/33[%rsi]* spilled-arg/37[s0]* + clos/31[%rdi]}\n    R/1[%rbx] := clos/31[%rdi]\n    {spilled-arg/37[s0]* + V/33[%rsi] R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33[%rsi] R/0[%rax] R/1[%rbx]\n    {spilled-arg/37[s0]* + R/0[%rax]}\n    clos/34[%rbx] := R/0[%rax]\n    {clos/34[%rbx]* spilled-arg/37[s0]* + clos/34[%rbx]}\n    V/35[%rdi] := val[clos/34[%rbx]]\n    {clos/34[%rbx]* V/35[%rdi]* + spilled-arg/37[s0]}\n    arg/38[%rax] := spilled-arg/37[s0] (reload)\n    {clos/34[%rbx]* V/35[%rdi]* + arg/38[%rax]}\n    R/0[%rax] := arg/38[%rax]\n    {R/0[%rax] V/35[%rdi]* + clos/34[%rbx]}\n    R/1[%rbx] := clos/34[%rbx]\n    { + V/35[%rdi] R/0[%rax] R/1[%rbx]}\n    tailcall V/35[%rdi] R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After register allocation\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg/29[%rax]* + R/1[%rbx]}\n  arg/30[%rbx] := R/1[%rbx]\n  {R/3[%rsi] arg/29[%rax]* arg/30[%rbx]* + R/2[%rdi]}\n  arg/31[%rdi] := R/2[%rdi]\n  {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* + R/3[%rsi]}\n  clos/32[%rsi] := R/3[%rsi]\n  {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* + clos/32[%rsi]}\n  V/33[%rdx] := val[clos/32[%rsi] + 8]\n  {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* + V/33[%rdx]}\n  if V/33[%rdx] ==s 7 then\n    {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* +\n     clos/32[%rsi]}\n    V/39[%rdx] := val[clos/32[%rsi] + 16]\n    {arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* V/39[%rdx]* + arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] arg/31[%rdi]* clos/32[%rsi]* V/39[%rdx]* + arg/30[%rbx]}\n    R/1[%rbx] := arg/30[%rbx]\n    {R/0[%rax] R/1[%rbx] clos/32[%rsi]* V/39[%rdx]* + arg/31[%rdi]}\n    R/2[%rdi] := arg/31[%rdi]\n    {R/0[%rax] R/1[%rbx] R/2[%rdi] V/39[%rdx]* + clos/32[%rsi]}\n    R/3[%rsi] := clos/32[%rsi]\n    { + V/39[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    {arg/29[%rax]* arg/30[%rbx]* clos/32[%rsi]* + arg/31[%rdi]}\n    spilled-arg/40[s0] := arg/31[%rdi] (spill)\n    {arg/29[%rax]* clos/32[%rsi]* spilled-arg/40[s0]* + arg/30[%rbx]}\n    spilled-arg/41[s1] := arg/30[%rbx] (spill)\n    {arg/29[%rax]* clos/32[%rsi]* spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     clos/32[%rsi]}\n    V/34[%rdi] := val[clos/32[%rsi]]\n    {clos/32[%rsi]* V/34[%rdi]* spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] V/34[%rdi]* spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     clos/32[%rsi]}\n    R/1[%rbx] := clos/32[%rsi]\n    {spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     V/34[%rdi] R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34[%rdi] R/0[%rax] R/1[%rbx]\n    {spilled-arg/40[s0]* spilled-arg/41[s1]* + R/0[%rax]}\n    clos/35[%rbx] := R/0[%rax]\n    {clos/35[%rbx]* spilled-arg/40[s0]* spilled-arg/41[s1]* + clos/35[%rbx]}\n    V/36[%rdi] := val[clos/35[%rbx]]\n    {clos/35[%rbx]* V/36[%rdi]* spilled-arg/40[s0]* + spilled-arg/41[s1]}\n    arg/42[%rax] := spilled-arg/41[s1] (reload)\n    {clos/35[%rbx]* V/36[%rdi]* spilled-arg/40[s0]* + arg/42[%rax]}\n    R/0[%rax] := arg/42[%rax]\n    {R/0[%rax] V/36[%rdi]* spilled-arg/40[s0]* + clos/35[%rbx]}\n    R/1[%rbx] := clos/35[%rbx]\n    {spilled-arg/40[s0]* + V/36[%rdi] R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36[%rdi] R/0[%rax] R/1[%rbx]\n    {spilled-arg/40[s0]* + R/0[%rax]}\n    clos/37[%rbx] := R/0[%rax]\n    {clos/37[%rbx]* spilled-arg/40[s0]* + clos/37[%rbx]}\n    V/38[%rdi] := val[clos/37[%rbx]]\n    {clos/37[%rbx]* V/38[%rdi]* + spilled-arg/40[s0]}\n    arg/43[%rax] := spilled-arg/40[s0] (reload)\n    {clos/37[%rbx]* V/38[%rdi]* + arg/43[%rax]}\n    R/0[%rax] := arg/43[%rax]\n    {R/0[%rax] V/38[%rdi]* + clos/37[%rbx]}\n    R/1[%rbx] := clos/37[%rbx]\n    { + V/38[%rdi] R/0[%rax] R/1[%rbx]}\n    tailcall V/38[%rdi] R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After register allocation\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rdi] := R/0[%rax]\n  {arg/29[%rdi]* + R/1[%rbx]}\n  clos/30[%rax] := R/1[%rbx]\n  {arg/29[%rdi]* clos/30[%rax]* + clos/30[%rax]}\n  clos/31[%rsi] := val[clos/30[%rax] + 24]\n  {arg/29[%rdi]* clos/31[%rsi]* + clos/30[%rax]}\n  V/32[%rax] := val[clos/30[%rax] + 16]\n  {arg/29[%rdi]* clos/31[%rsi]* V/32[%rax]* + clos/31[%rsi]}\n  V/33[%rdx] := val[clos/31[%rsi] + 16]\n  {arg/29[%rdi]* clos/31[%rsi]* V/33[%rdx]* + V/32[%rax]}\n  R/0[%rax] := V/32[%rax]\n  {R/0[%rax] clos/31[%rsi]* V/33[%rdx]* + arg/29[%rdi]}\n  R/1[%rbx] := arg/29[%rdi]\n  {R/0[%rax] R/1[%rbx] V/33[%rdx]* + clos/31[%rsi]}\n  R/2[%rdi] := clos/31[%rsi]\n  { + V/33[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After register allocation\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 4343 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry2_1\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 3 (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rdi] := R/0[%rax]\n  {arg/29[%rdi]* + R/1[%rbx]}\n  clos/30[%rax] := R/1[%rbx]\n  {arg/29[%rdi]* clos/30[%rax]* + clos/30[%rax]}\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  {arg/29[%rdi]* clos/30[%rax]* clos/31[%rbx]* + clos/31[%rbx]}\n  clos/32[%rsi] := val[clos/31[%rbx] + 32]\n  {arg/29[%rdi]* clos/31[%rbx]* clos/32[%rsi]* + clos/30[%rax]}\n  V/33[%rdx] := val[clos/30[%rax] + 16]\n  {arg/29[%rdi]* clos/32[%rsi]* V/33[%rdx]* + clos/31[%rbx]}\n  V/34[%rax] := val[clos/31[%rbx] + 24]\n  {arg/29[%rdi]* clos/32[%rsi]* V/33[%rdx]* V/34[%rax]* + clos/32[%rsi]}\n  V/35[%rcx] := val[clos/32[%rsi] + 16]\n  {arg/29[%rdi]* clos/32[%rsi]* V/33[%rdx]* V/35[%rcx]* + V/34[%rax]}\n  R/0[%rax] := V/34[%rax]\n  {R/0[%rax] arg/29[%rdi]* clos/32[%rsi]* V/35[%rcx]* + V/33[%rdx]}\n  R/1[%rbx] := V/33[%rdx]\n  {R/0[%rax] R/1[%rbx] clos/32[%rsi]* V/35[%rcx]* + arg/29[%rdi]}\n  R/2[%rdi] := arg/29[%rdi]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/35[%rcx]* + clos/32[%rsi]}\n  R/3[%rsi] := clos/32[%rsi]\n  { + V/35[%rcx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35[%rcx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After register allocation\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 4343 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry3_2\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 3 (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg2/29[%rsi] := R/0[%rax]\n  {R/2[%rdi] arg2/29[%rsi]* + R/1[%rbx]}\n  arg3/30[%rdx] := R/1[%rbx]\n  {arg2/29[%rsi]* arg3/30[%rdx]* + R/2[%rdi]}\n  clos/31[%rax] := R/2[%rdi]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/31[%rax]* + clos/31[%rax]}\n  clos/32[%rcx] := val[clos/31[%rax] + 32]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/32[%rcx]* + clos/31[%rax]}\n  V/33[%rax] := val[clos/31[%rax] + 24]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/32[%rcx]* V/33[%rax]* + clos/32[%rcx]}\n  V/34[%r8] := val[clos/32[%rcx] + 16]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/32[%rcx]* V/34[%r8]* + V/33[%rax]}\n  R/0[%rax] := V/33[%rax]\n  {R/0[%rax] arg3/30[%rdx]* clos/32[%rcx]* V/34[%r8]* + arg2/29[%rsi]}\n  R/1[%rbx] := arg2/29[%rsi]\n  {R/0[%rax] R/1[%rbx] clos/32[%rcx]* V/34[%r8]* + arg3/30[%rdx]}\n  R/2[%rdi] := arg3/30[%rdx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/34[%r8]* + clos/32[%rcx]}\n  R/3[%rsi] := clos/32[%rcx]\n  { + V/34[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After register allocation\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 5367 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry3_1\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 5 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/33[%rsi] := \"caml_curry3_1_app\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/33[%rsi] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rsi] := R/0[%rax]\n  {arg/29[%rsi]* + R/1[%rbx]}\n  clos/30[%rax] := R/1[%rbx]\n  {arg/29[%rsi]* clos/30[%rax]* + clos/30[%rax]}\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  {arg/29[%rsi]* clos/30[%rax]* clos/31[%rbx]* + clos/31[%rbx]}\n  clos/32[%rdi] := val[clos/31[%rbx] + 32]\n  {arg/29[%rsi]* clos/30[%rax]* clos/31[%rbx]* clos/32[%rdi]* +\n   clos/32[%rdi]}\n  clos/33[%rdx] := val[clos/32[%rdi] + 32]\n  {arg/29[%rsi]* clos/31[%rbx]* clos/32[%rdi]* clos/33[%rdx]* +\n   clos/30[%rax]}\n  V/34[%rcx] := val[clos/30[%rax] + 16]\n  {arg/29[%rsi]* clos/32[%rdi]* clos/33[%rdx]* V/34[%rcx]* + clos/31[%rbx]}\n  V/35[%rbx] := val[clos/31[%rbx] + 24]\n  {arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/35[%rbx]* + clos/32[%rdi]}\n  V/36[%rax] := val[clos/32[%rdi] + 24]\n  {arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/35[%rbx]* V/36[%rax]* +\n   clos/33[%rdx]}\n  V/37[%r8] := val[clos/33[%rdx] + 16]\n  {arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/35[%rbx]* V/37[%r8]* +\n   V/36[%rax]}\n  R/0[%rax] := V/36[%rax]\n  {R/0[%rax] arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/37[%r8]* +\n   V/35[%rbx]}\n  R/1[%rbx] := V/35[%rbx]\n  {R/0[%rax] R/1[%rbx] arg/29[%rsi]* clos/33[%rdx]* V/37[%r8]* + V/34[%rcx]}\n  R/2[%rdi] := V/34[%rcx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33[%rdx]* V/37[%r8]* + arg/29[%rsi]}\n  R/3[%rsi] := arg/29[%rsi]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/37[%r8]* + clos/33[%rdx]}\n  R/4[%rdx] := clos/33[%rdx]\n  { + V/37[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After register allocation\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 4343 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry4_3\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 3 (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg3/29[%rsi] := R/0[%rax]\n  {R/2[%rdi] arg3/29[%rsi]* + R/1[%rbx]}\n  arg4/30[%rdx] := R/1[%rbx]\n  {arg3/29[%rsi]* arg4/30[%rdx]* + R/2[%rdi]}\n  clos/31[%rax] := R/2[%rdi]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/31[%rax]* + clos/31[%rax]}\n  clos/32[%rbx] := val[clos/31[%rax] + 32]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/31[%rax]* clos/32[%rbx]* +\n   clos/32[%rbx]}\n  clos/33[%rcx] := val[clos/32[%rbx] + 32]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/32[%rbx]* clos/33[%rcx]* +\n   clos/31[%rax]}\n  V/34[%rdi] := val[clos/31[%rax] + 24]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/34[%rdi]* + clos/32[%rbx]}\n  V/35[%rax] := val[clos/32[%rbx] + 24]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/34[%rdi]* V/35[%rax]* +\n   clos/33[%rcx]}\n  V/36[%r8] := val[clos/33[%rcx] + 16]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/34[%rdi]* V/36[%r8]* +\n   V/35[%rax]}\n  R/0[%rax] := V/35[%rax]\n  {R/0[%rax] arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/36[%r8]* +\n   V/34[%rdi]}\n  R/1[%rbx] := V/34[%rdi]\n  {R/0[%rax] R/1[%rbx] arg4/30[%rdx]* clos/33[%rcx]* V/36[%r8]* +\n   arg3/29[%rsi]}\n  R/2[%rdi] := arg3/29[%rsi]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33[%rcx]* V/36[%r8]* + arg4/30[%rdx]}\n  R/3[%rsi] := arg4/30[%rdx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/36[%r8]* + clos/33[%rcx]}\n  R/4[%rdx] := clos/33[%rcx]\n  { + V/36[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After register allocation\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 5367 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry4_2\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 5 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/33[%rsi] := \"caml_curry4_2_app\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/33[%rsi] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg2/29[%rdx] := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg2/29[%rdx]* + R/1[%rbx]}\n  arg3/30[%rcx] := R/1[%rbx]\n  {R/3[%rsi] arg2/29[%rdx]* arg3/30[%rcx]* + R/2[%rdi]}\n  arg4/31[%r8] := R/2[%rdi]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* + R/3[%rsi]}\n  clos/32[%rax] := R/3[%rsi]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/32[%rax]* +\n   clos/32[%rax]}\n  clos/33[%r9] := val[clos/32[%rax] + 32]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* + clos/32[%rax]}\n  V/34[%rax] := val[clos/32[%rax] + 24]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* V/34[%rax]* +\n   clos/33[%r9]}\n  V/35[%r12] := val[clos/33[%r9] + 16]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* V/35[%r12]* +\n   V/34[%rax]}\n  R/0[%rax] := V/34[%rax]\n  {R/0[%rax] arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* V/35[%r12]* +\n   arg2/29[%rdx]}\n  R/1[%rbx] := arg2/29[%rdx]\n  {R/0[%rax] R/1[%rbx] arg4/31[%r8]* clos/33[%r9]* V/35[%r12]* +\n   arg3/30[%rcx]}\n  R/2[%rdi] := arg3/30[%rcx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33[%r9]* V/35[%r12]* + arg4/31[%r8]}\n  R/3[%rsi] := arg4/31[%r8]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/35[%r12]* + clos/33[%r9]}\n  R/4[%rdx] := clos/33[%r9]\n  { + V/35[%r12] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35[%r12] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After register allocation\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 5367 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry4_1\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 7 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/33[%rsi] := \"caml_curry4_1_app\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/33[%rsi] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29[%rax] := \"caml_globals_inited\"\n  { + I/29[%rax]}\n  [I/29[%rax]] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30[%rax] := \"caml_globals_inited\"\n  { + I/30[%rax]}\n  [I/30[%rax]] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31[%rax] := \"caml_globals_inited\"\n  { + I/31[%rax]}\n  [I/31[%rax]] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32[%rax] := \"caml_globals_inited\"\n  { + I/32[%rax]}\n  [I/32[%rax]] +:= 1\n  {}\n  I/33[%rax] := 1\n  { + I/33[%rax]}\n  R/0[%rax] := I/33[%rax]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  {}\n  I/30[%rax] := 3\n  { + I/30[%rax]}\n  R/0[%rax] := I/30[%rax]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After register allocation\ncamlAsmgen_flags__entry()\n  {}\n  kas/29[%rax] := \"camlAsmgen_flags__1\"\n  {kas/29[%rax]}\n  I/30[%rbx] := \"camlAsmgen_flags\"\n  { + kas/29[%rax] I/30[%rbx]}\n  val[I/30[%rbx]] := kas/29[%rax] (init)\n  {}\n  I/31[%rax] := 1\n  { + I/31[%rax]}\n  R/0[%rax] := I/31[%rax]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_reload":
    ["*** After insertion of reloading code\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {R/2[%rdi] arg/29[%rax]* + R/1[%rbx]}\n  arg/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* arg/30[%rbx]* + R/2[%rdi]}\n  clos/31[%rdi] := R/2[%rdi]\n  {arg/29[%rax]* arg/30[%rbx]* clos/31[%rdi]* + clos/31[%rdi]}\n  V/32[%rsi] := val[clos/31[%rdi] + 8]\n  { + V/32[%rsi]}\n  if V/32[%rsi] ==s 5 then\n    {arg/29[%rax]* arg/30[%rbx]* clos/31[%rdi]* + clos/31[%rdi]}\n    V/36[%rsi] := val[clos/31[%rdi] + 16]\n    {arg/30[%rbx]* clos/31[%rdi]* V/36[%rsi]* + arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] clos/31[%rdi]* V/36[%rsi]* + arg/30[%rbx]}\n    R/1[%rbx] := arg/30[%rbx]\n    {R/0[%rax] R/1[%rbx] V/36[%rsi]* + clos/31[%rdi]}\n    R/2[%rdi] := clos/31[%rdi]\n    { + V/36[%rsi] R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36[%rsi] R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    {arg/29[%rax]* clos/31[%rdi]* + arg/30[%rbx]}\n    spilled-arg/37[s0] := arg/30[%rbx] (spill)\n    {arg/29[%rax]* clos/31[%rdi]* spilled-arg/37[s0]* + clos/31[%rdi]}\n    V/33[%rsi] := val[clos/31[%rdi]]\n    {clos/31[%rdi]* V/33[%rsi]* spilled-arg/37[s0]* + arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] V/33[%rsi]* spilled-arg/37[s0]* + clos/31[%rdi]}\n    R/1[%rbx] := clos/31[%rdi]\n    {spilled-arg/37[s0]* + V/33[%rsi] R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33[%rsi] R/0[%rax] R/1[%rbx]\n    {spilled-arg/37[s0]* + R/0[%rax]}\n    clos/34[%rbx] := R/0[%rax]\n    {clos/34[%rbx]* spilled-arg/37[s0]* + clos/34[%rbx]}\n    V/35[%rdi] := val[clos/34[%rbx]]\n    {clos/34[%rbx]* V/35[%rdi]* + spilled-arg/37[s0]}\n    arg/38[%rax] := spilled-arg/37[s0] (reload)\n    {clos/34[%rbx]* V/35[%rdi]* + arg/38[%rax]}\n    R/0[%rax] := arg/38[%rax]\n    {R/0[%rax] V/35[%rdi]* + clos/34[%rbx]}\n    R/1[%rbx] := clos/34[%rbx]\n    { + V/35[%rdi] R/0[%rax] R/1[%rbx]}\n    tailcall V/35[%rdi] R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After insertion of reloading code\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg/29[%rax]* + R/1[%rbx]}\n  arg/30[%rbx] := R/1[%rbx]\n  {R/3[%rsi] arg/29[%rax]* arg/30[%rbx]* + R/2[%rdi]}\n  arg/31[%rdi] := R/2[%rdi]\n  {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* + R/3[%rsi]}\n  clos/32[%rsi] := R/3[%rsi]\n  {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* + clos/32[%rsi]}\n  V/33[%rdx] := val[clos/32[%rsi] + 8]\n  { + V/33[%rdx]}\n  if V/33[%rdx] ==s 7 then\n    {arg/29[%rax]* arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* +\n     clos/32[%rsi]}\n    V/39[%rdx] := val[clos/32[%rsi] + 16]\n    {arg/30[%rbx]* arg/31[%rdi]* clos/32[%rsi]* V/39[%rdx]* + arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] arg/31[%rdi]* clos/32[%rsi]* V/39[%rdx]* + arg/30[%rbx]}\n    R/1[%rbx] := arg/30[%rbx]\n    {R/0[%rax] R/1[%rbx] clos/32[%rsi]* V/39[%rdx]* + arg/31[%rdi]}\n    R/2[%rdi] := arg/31[%rdi]\n    {R/0[%rax] R/1[%rbx] R/2[%rdi] V/39[%rdx]* + clos/32[%rsi]}\n    R/3[%rsi] := clos/32[%rsi]\n    { + V/39[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    {arg/29[%rax]* arg/30[%rbx]* clos/32[%rsi]* + arg/31[%rdi]}\n    spilled-arg/40[s0] := arg/31[%rdi] (spill)\n    {arg/29[%rax]* clos/32[%rsi]* spilled-arg/40[s0]* + arg/30[%rbx]}\n    spilled-arg/41[s1] := arg/30[%rbx] (spill)\n    {arg/29[%rax]* clos/32[%rsi]* spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     clos/32[%rsi]}\n    V/34[%rdi] := val[clos/32[%rsi]]\n    {clos/32[%rsi]* V/34[%rdi]* spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     arg/29[%rax]}\n    R/0[%rax] := arg/29[%rax]\n    {R/0[%rax] V/34[%rdi]* spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     clos/32[%rsi]}\n    R/1[%rbx] := clos/32[%rsi]\n    {spilled-arg/40[s0]* spilled-arg/41[s1]* +\n     V/34[%rdi] R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34[%rdi] R/0[%rax] R/1[%rbx]\n    {spilled-arg/40[s0]* spilled-arg/41[s1]* + R/0[%rax]}\n    clos/35[%rbx] := R/0[%rax]\n    {clos/35[%rbx]* spilled-arg/40[s0]* spilled-arg/41[s1]* + clos/35[%rbx]}\n    V/36[%rdi] := val[clos/35[%rbx]]\n    {clos/35[%rbx]* V/36[%rdi]* spilled-arg/40[s0]* + spilled-arg/41[s1]}\n    arg/42[%rax] := spilled-arg/41[s1] (reload)\n    {clos/35[%rbx]* V/36[%rdi]* spilled-arg/40[s0]* + arg/42[%rax]}\n    R/0[%rax] := arg/42[%rax]\n    {R/0[%rax] V/36[%rdi]* spilled-arg/40[s0]* + clos/35[%rbx]}\n    R/1[%rbx] := clos/35[%rbx]\n    {spilled-arg/40[s0]* + V/36[%rdi] R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36[%rdi] R/0[%rax] R/1[%rbx]\n    {spilled-arg/40[s0]* + R/0[%rax]}\n    clos/37[%rbx] := R/0[%rax]\n    {clos/37[%rbx]* spilled-arg/40[s0]* + clos/37[%rbx]}\n    V/38[%rdi] := val[clos/37[%rbx]]\n    {clos/37[%rbx]* V/38[%rdi]* + spilled-arg/40[s0]}\n    arg/43[%rax] := spilled-arg/40[s0] (reload)\n    {clos/37[%rbx]* V/38[%rdi]* + arg/43[%rax]}\n    R/0[%rax] := arg/43[%rax]\n    {R/0[%rax] V/38[%rdi]* + clos/37[%rbx]}\n    R/1[%rbx] := clos/37[%rbx]\n    { + V/38[%rdi] R/0[%rax] R/1[%rbx]}\n    tailcall V/38[%rdi] R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After insertion of reloading code\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rdi] := R/0[%rax]\n  {arg/29[%rdi]* + R/1[%rbx]}\n  clos/30[%rax] := R/1[%rbx]\n  {arg/29[%rdi]* clos/30[%rax]* + clos/30[%rax]}\n  clos/31[%rsi] := val[clos/30[%rax] + 24]\n  {arg/29[%rdi]* clos/31[%rsi]* + clos/30[%rax]}\n  V/32[%rax] := val[clos/30[%rax] + 16]\n  {arg/29[%rdi]* clos/31[%rsi]* V/32[%rax]* + clos/31[%rsi]}\n  V/33[%rdx] := val[clos/31[%rsi] + 16]\n  {arg/29[%rdi]* clos/31[%rsi]* V/33[%rdx]* + V/32[%rax]}\n  R/0[%rax] := V/32[%rax]\n  {R/0[%rax] clos/31[%rsi]* V/33[%rdx]* + arg/29[%rdi]}\n  R/1[%rbx] := arg/29[%rdi]\n  {R/0[%rax] R/1[%rbx] V/33[%rdx]* + clos/31[%rsi]}\n  R/2[%rdi] := clos/31[%rsi]\n  { + V/33[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After insertion of reloading code\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 4343 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry2_1\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 3 (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rdi] := R/0[%rax]\n  {arg/29[%rdi]* + R/1[%rbx]}\n  clos/30[%rax] := R/1[%rbx]\n  {arg/29[%rdi]* clos/30[%rax]* + clos/30[%rax]}\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  {arg/29[%rdi]* clos/30[%rax]* clos/31[%rbx]* + clos/31[%rbx]}\n  clos/32[%rsi] := val[clos/31[%rbx] + 32]\n  {arg/29[%rdi]* clos/31[%rbx]* clos/32[%rsi]* + clos/30[%rax]}\n  V/33[%rdx] := val[clos/30[%rax] + 16]\n  {arg/29[%rdi]* clos/32[%rsi]* V/33[%rdx]* + clos/31[%rbx]}\n  V/34[%rax] := val[clos/31[%rbx] + 24]\n  {arg/29[%rdi]* clos/32[%rsi]* V/33[%rdx]* V/34[%rax]* + clos/32[%rsi]}\n  V/35[%rcx] := val[clos/32[%rsi] + 16]\n  {arg/29[%rdi]* clos/32[%rsi]* V/33[%rdx]* V/35[%rcx]* + V/34[%rax]}\n  R/0[%rax] := V/34[%rax]\n  {R/0[%rax] arg/29[%rdi]* clos/32[%rsi]* V/35[%rcx]* + V/33[%rdx]}\n  R/1[%rbx] := V/33[%rdx]\n  {R/0[%rax] R/1[%rbx] clos/32[%rsi]* V/35[%rcx]* + arg/29[%rdi]}\n  R/2[%rdi] := arg/29[%rdi]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/35[%rcx]* + clos/32[%rsi]}\n  R/3[%rsi] := clos/32[%rsi]\n  { + V/35[%rcx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35[%rcx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After insertion of reloading code\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 4343 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry3_2\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 3 (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg2/29[%rsi] := R/0[%rax]\n  {R/2[%rdi] arg2/29[%rsi]* + R/1[%rbx]}\n  arg3/30[%rdx] := R/1[%rbx]\n  {arg2/29[%rsi]* arg3/30[%rdx]* + R/2[%rdi]}\n  clos/31[%rax] := R/2[%rdi]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/31[%rax]* + clos/31[%rax]}\n  clos/32[%rcx] := val[clos/31[%rax] + 32]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/32[%rcx]* + clos/31[%rax]}\n  V/33[%rax] := val[clos/31[%rax] + 24]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/32[%rcx]* V/33[%rax]* + clos/32[%rcx]}\n  V/34[%r8] := val[clos/32[%rcx] + 16]\n  {arg2/29[%rsi]* arg3/30[%rdx]* clos/32[%rcx]* V/34[%r8]* + V/33[%rax]}\n  R/0[%rax] := V/33[%rax]\n  {R/0[%rax] arg3/30[%rdx]* clos/32[%rcx]* V/34[%r8]* + arg2/29[%rsi]}\n  R/1[%rbx] := arg2/29[%rsi]\n  {R/0[%rax] R/1[%rbx] clos/32[%rcx]* V/34[%r8]* + arg3/30[%rdx]}\n  R/2[%rdi] := arg3/30[%rdx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/34[%r8]* + clos/32[%rcx]}\n  R/3[%rsi] := clos/32[%rcx]\n  { + V/34[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After insertion of reloading code\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 5367 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry3_1\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 5 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/33[%rsi] := \"caml_curry3_1_app\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/33[%rsi] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rsi] := R/0[%rax]\n  {arg/29[%rsi]* + R/1[%rbx]}\n  clos/30[%rax] := R/1[%rbx]\n  {arg/29[%rsi]* clos/30[%rax]* + clos/30[%rax]}\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  {arg/29[%rsi]* clos/30[%rax]* clos/31[%rbx]* + clos/31[%rbx]}\n  clos/32[%rdi] := val[clos/31[%rbx] + 32]\n  {arg/29[%rsi]* clos/30[%rax]* clos/31[%rbx]* clos/32[%rdi]* +\n   clos/32[%rdi]}\n  clos/33[%rdx] := val[clos/32[%rdi] + 32]\n  {arg/29[%rsi]* clos/31[%rbx]* clos/32[%rdi]* clos/33[%rdx]* +\n   clos/30[%rax]}\n  V/34[%rcx] := val[clos/30[%rax] + 16]\n  {arg/29[%rsi]* clos/32[%rdi]* clos/33[%rdx]* V/34[%rcx]* + clos/31[%rbx]}\n  V/35[%rbx] := val[clos/31[%rbx] + 24]\n  {arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/35[%rbx]* + clos/32[%rdi]}\n  V/36[%rax] := val[clos/32[%rdi] + 24]\n  {arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/35[%rbx]* V/36[%rax]* +\n   clos/33[%rdx]}\n  V/37[%r8] := val[clos/33[%rdx] + 16]\n  {arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/35[%rbx]* V/37[%r8]* +\n   V/36[%rax]}\n  R/0[%rax] := V/36[%rax]\n  {R/0[%rax] arg/29[%rsi]* clos/33[%rdx]* V/34[%rcx]* V/37[%r8]* +\n   V/35[%rbx]}\n  R/1[%rbx] := V/35[%rbx]\n  {R/0[%rax] R/1[%rbx] arg/29[%rsi]* clos/33[%rdx]* V/37[%r8]* + V/34[%rcx]}\n  R/2[%rdi] := V/34[%rcx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33[%rdx]* V/37[%r8]* + arg/29[%rsi]}\n  R/3[%rsi] := arg/29[%rsi]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/37[%r8]* + clos/33[%rdx]}\n  R/4[%rdx] := clos/33[%rdx]\n  { + V/37[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After insertion of reloading code\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 4343 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry4_3\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 3 (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg3/29[%rsi] := R/0[%rax]\n  {R/2[%rdi] arg3/29[%rsi]* + R/1[%rbx]}\n  arg4/30[%rdx] := R/1[%rbx]\n  {arg3/29[%rsi]* arg4/30[%rdx]* + R/2[%rdi]}\n  clos/31[%rax] := R/2[%rdi]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/31[%rax]* + clos/31[%rax]}\n  clos/32[%rbx] := val[clos/31[%rax] + 32]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/31[%rax]* clos/32[%rbx]* +\n   clos/32[%rbx]}\n  clos/33[%rcx] := val[clos/32[%rbx] + 32]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/32[%rbx]* clos/33[%rcx]* +\n   clos/31[%rax]}\n  V/34[%rdi] := val[clos/31[%rax] + 24]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/34[%rdi]* + clos/32[%rbx]}\n  V/35[%rax] := val[clos/32[%rbx] + 24]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/34[%rdi]* V/35[%rax]* +\n   clos/33[%rcx]}\n  V/36[%r8] := val[clos/33[%rcx] + 16]\n  {arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/34[%rdi]* V/36[%r8]* +\n   V/35[%rax]}\n  R/0[%rax] := V/35[%rax]\n  {R/0[%rax] arg3/29[%rsi]* arg4/30[%rdx]* clos/33[%rcx]* V/36[%r8]* +\n   V/34[%rdi]}\n  R/1[%rbx] := V/34[%rdi]\n  {R/0[%rax] R/1[%rbx] arg4/30[%rdx]* clos/33[%rcx]* V/36[%r8]* +\n   arg3/29[%rsi]}\n  R/2[%rdi] := arg3/29[%rsi]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33[%rcx]* V/36[%r8]* + arg4/30[%rdx]}\n  R/3[%rsi] := arg4/30[%rdx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/36[%r8]* + clos/33[%rcx]}\n  R/4[%rdx] := clos/33[%rcx]\n  { + V/36[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After insertion of reloading code\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 5367 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry4_2\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 5 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/33[%rsi] := \"caml_curry4_2_app\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/33[%rsi] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg2/29[%rdx] := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg2/29[%rdx]* + R/1[%rbx]}\n  arg3/30[%rcx] := R/1[%rbx]\n  {R/3[%rsi] arg2/29[%rdx]* arg3/30[%rcx]* + R/2[%rdi]}\n  arg4/31[%r8] := R/2[%rdi]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* + R/3[%rsi]}\n  clos/32[%rax] := R/3[%rsi]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/32[%rax]* +\n   clos/32[%rax]}\n  clos/33[%r9] := val[clos/32[%rax] + 32]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* + clos/32[%rax]}\n  V/34[%rax] := val[clos/32[%rax] + 24]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* V/34[%rax]* +\n   clos/33[%r9]}\n  V/35[%r12] := val[clos/33[%r9] + 16]\n  {arg2/29[%rdx]* arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* V/35[%r12]* +\n   V/34[%rax]}\n  R/0[%rax] := V/34[%rax]\n  {R/0[%rax] arg3/30[%rcx]* arg4/31[%r8]* clos/33[%r9]* V/35[%r12]* +\n   arg2/29[%rdx]}\n  R/1[%rbx] := arg2/29[%rdx]\n  {R/0[%rax] R/1[%rbx] arg4/31[%r8]* clos/33[%r9]* V/35[%r12]* +\n   arg3/30[%rcx]}\n  R/2[%rdi] := arg3/30[%rcx]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33[%r9]* V/35[%r12]* + arg4/31[%r8]}\n  R/3[%rsi] := arg4/31[%r8]\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/35[%r12]* + clos/33[%r9]}\n  R/4[%rdx] := clos/33[%r9]\n  { + V/35[%r12] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35[%r12] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After insertion of reloading code\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29[%rax] := R/0[%rax]\n  {arg/29[%rax]* + R/1[%rbx]}\n  clos/30[%rbx] := R/1[%rbx]\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + -8] := 5367 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/32[%rsi] := \"caml_curry4_1\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/32[%rsi] V/31[%rdi]}\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + V/31[%rdi]}\n  [V/31[%rdi] + 8] := 7 (init)\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]*}\n  I/33[%rsi] := \"caml_curry4_1_app\"\n  {arg/29[%rax]* clos/30[%rbx]* V/31[%rdi]* + I/33[%rsi] V/31[%rdi]}\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  {clos/30[%rbx]* V/31[%rdi]* + arg/29[%rax] V/31[%rdi]}\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  {V/31[%rdi]* + clos/30[%rbx] V/31[%rdi]}\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  { + V/31[%rdi]}\n  R/0[%rax] := V/31[%rdi]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29[%rax] := \"caml_globals_inited\"\n  { + I/29[%rax]}\n  [I/29[%rax]] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30[%rax] := \"caml_globals_inited\"\n  { + I/30[%rax]}\n  [I/30[%rax]] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31[%rax] := \"caml_globals_inited\"\n  { + I/31[%rax]}\n  [I/31[%rax]] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32[%rax] := \"caml_globals_inited\"\n  { + I/32[%rax]}\n  [I/32[%rax]] +:= 1\n  {}\n  I/33[%rax] := 1\n  { + I/33[%rax]}\n  R/0[%rax] := I/33[%rax]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  {}\n  I/30[%rax] := 3\n  { + I/30[%rax]}\n  R/0[%rax] := I/30[%rax]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After insertion of reloading code\ncamlAsmgen_flags__entry()\n  {}\n  kas/29[%rax] := \"camlAsmgen_flags__1\"\n  {kas/29[%rax]}\n  I/30[%rbx] := \"camlAsmgen_flags\"\n  { + kas/29[%rax] I/30[%rbx]}\n  val[I/30[%rbx]] := kas/29[%rax] (init)\n  {}\n  I/31[%rax] := 1\n  { + I/31[%rax]}\n  R/0[%rax] := I/31[%rax]\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_scheduling":
    ["*** After instruction scheduling\ncaml_apply2:\n  prologue\n  L153:\n  V/32[%rsi] := val[clos/31[%rdi] + 8]\n  if V/32[%rsi] !=s 5 goto L152\n  V/36[%rsi] := val[clos/31[%rdi] + 16]\n  tailcall V/36[%rsi] R/0[%rax] R/1[%rbx] R/2[%rdi]\n  L152:\n  spilled-arg/37[s0] := arg/30[%rbx] (spill)\n  V/33[%rsi] := val[clos/31[%rdi]]\n  R/1[%rbx] := clos/31[%rdi]\n  {spilled-arg/37[s0]*}\n  R/0[%rax] := call V/33[%rsi] R/0[%rax] R/1[%rbx]\n  clos/34[%rbx] := R/0[%rax]\n  V/35[%rdi] := val[clos/34[%rbx]]\n  arg/38[%rax] := spilled-arg/37[s0] (reload)\n  tailcall V/35[%rdi] R/0[%rax] R/1[%rbx]\n  \n",
     "*** After instruction scheduling\ncaml_apply3:\n  prologue\n  L148:\n  V/33[%rdx] := val[clos/32[%rsi] + 8]\n  if V/33[%rdx] !=s 7 goto L147\n  V/39[%rdx] := val[clos/32[%rsi] + 16]\n  tailcall V/39[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  L147:\n  spilled-arg/40[s0] := arg/31[%rdi] (spill)\n  spilled-arg/41[s1] := arg/30[%rbx] (spill)\n  V/34[%rdi] := val[clos/32[%rsi]]\n  R/1[%rbx] := clos/32[%rsi]\n  {spilled-arg/40[s0]* spilled-arg/41[s1]*}\n  R/0[%rax] := call V/34[%rdi] R/0[%rax] R/1[%rbx]\n  clos/35[%rbx] := R/0[%rax]\n  V/36[%rdi] := val[clos/35[%rbx]]\n  arg/42[%rax] := spilled-arg/41[s1] (reload)\n  {spilled-arg/40[s0]*}\n  R/0[%rax] := call V/36[%rdi] R/0[%rax] R/1[%rbx]\n  clos/37[%rbx] := R/0[%rax]\n  V/38[%rdi] := val[clos/37[%rbx]]\n  arg/43[%rax] := spilled-arg/40[s0] (reload)\n  tailcall V/38[%rdi] R/0[%rax] R/1[%rbx]\n  \n",
     "*** After instruction scheduling\ncaml_curry2_1:\n  L142:\n  arg/29[%rdi] := R/0[%rax]\n  clos/30[%rax] := R/1[%rbx]\n  clos/31[%rsi] := val[clos/30[%rax] + 24]\n  V/32[%rax] := val[clos/30[%rax] + 16]\n  V/33[%rdx] := val[clos/31[%rsi] + 16]\n  R/1[%rbx] := arg/29[%rdi]\n  R/2[%rdi] := clos/31[%rsi]\n  tailcall V/33[%rdx] R/0[%rax] R/1[%rbx] R/2[%rdi]\n  \n",
     "*** After instruction scheduling\ncaml_curry2:\n  prologue\n  L137:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  [V/31[%rdi] + -8] := 4343 (init)\n  I/32[%rsi] := \"caml_curry2_1\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 3 (init)\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncaml_curry3_2:\n  L136:\n  arg/29[%rdi] := R/0[%rax]\n  clos/30[%rax] := R/1[%rbx]\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  clos/32[%rsi] := val[clos/31[%rbx] + 32]\n  V/33[%rdx] := val[clos/30[%rax] + 16]\n  V/34[%rax] := val[clos/31[%rbx] + 24]\n  V/35[%rcx] := val[clos/32[%rsi] + 16]\n  R/1[%rbx] := V/33[%rdx]\n  tailcall V/35[%rcx] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  \n",
     "*** After instruction scheduling\ncaml_curry3_1:\n  prologue\n  L131:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  [V/31[%rdi] + -8] := 4343 (init)\n  I/32[%rsi] := \"caml_curry3_2\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 3 (init)\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncaml_curry3_1_app:\n  L130:\n  arg2/29[%rsi] := R/0[%rax]\n  arg3/30[%rdx] := R/1[%rbx]\n  clos/31[%rax] := R/2[%rdi]\n  clos/32[%rcx] := val[clos/31[%rax] + 32]\n  V/33[%rax] := val[clos/31[%rax] + 24]\n  V/34[%r8] := val[clos/32[%rcx] + 16]\n  R/1[%rbx] := arg2/29[%rsi]\n  R/2[%rdi] := arg3/30[%rdx]\n  R/3[%rsi] := clos/32[%rcx]\n  tailcall V/34[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  \n",
     "*** After instruction scheduling\ncaml_curry3:\n  prologue\n  L125:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  [V/31[%rdi] + -8] := 5367 (init)\n  I/32[%rsi] := \"caml_curry3_1\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 5 (init)\n  I/33[%rsi] := \"caml_curry3_1_app\"\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncaml_curry4_3:\n  L124:\n  arg/29[%rsi] := R/0[%rax]\n  clos/30[%rax] := R/1[%rbx]\n  clos/31[%rbx] := val[clos/30[%rax] + 24]\n  clos/32[%rdi] := val[clos/31[%rbx] + 32]\n  clos/33[%rdx] := val[clos/32[%rdi] + 32]\n  V/34[%rcx] := val[clos/30[%rax] + 16]\n  V/35[%rbx] := val[clos/31[%rbx] + 24]\n  V/36[%rax] := val[clos/32[%rdi] + 24]\n  V/37[%r8] := val[clos/33[%rdx] + 16]\n  R/2[%rdi] := V/34[%rcx]\n  tailcall V/37[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n  \n",
     "*** After instruction scheduling\ncaml_curry4_2:\n  prologue\n  L119:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 40\n  [V/31[%rdi] + -8] := 4343 (init)\n  I/32[%rsi] := \"caml_curry4_3\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 3 (init)\n  val[V/31[%rdi] + 16] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 24] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncaml_curry4_2_app:\n  L118:\n  arg3/29[%rsi] := R/0[%rax]\n  arg4/30[%rdx] := R/1[%rbx]\n  clos/31[%rax] := R/2[%rdi]\n  clos/32[%rbx] := val[clos/31[%rax] + 32]\n  clos/33[%rcx] := val[clos/32[%rbx] + 32]\n  V/34[%rdi] := val[clos/31[%rax] + 24]\n  V/35[%rax] := val[clos/32[%rbx] + 24]\n  V/36[%r8] := val[clos/33[%rcx] + 16]\n  R/1[%rbx] := V/34[%rdi]\n  R/2[%rdi] := arg3/29[%rsi]\n  R/3[%rsi] := arg4/30[%rdx]\n  R/4[%rdx] := clos/33[%rcx]\n  tailcall V/36[%r8] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n  \n",
     "*** After instruction scheduling\ncaml_curry4_1:\n  prologue\n  L113:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  [V/31[%rdi] + -8] := 5367 (init)\n  I/32[%rsi] := \"caml_curry4_2\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 5 (init)\n  I/33[%rsi] := \"caml_curry4_2_app\"\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncaml_curry4_1_app:\n  L112:\n  arg2/29[%rdx] := R/0[%rax]\n  arg3/30[%rcx] := R/1[%rbx]\n  arg4/31[%r8] := R/2[%rdi]\n  clos/32[%rax] := R/3[%rsi]\n  clos/33[%r9] := val[clos/32[%rax] + 32]\n  V/34[%rax] := val[clos/32[%rax] + 24]\n  V/35[%r12] := val[clos/33[%r9] + 16]\n  R/1[%rbx] := arg2/29[%rdx]\n  R/2[%rdi] := arg3/30[%rcx]\n  R/3[%rsi] := arg4/31[%r8]\n  R/4[%rdx] := clos/33[%r9]\n  tailcall V/35[%r12] R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n  \n",
     "*** After instruction scheduling\ncaml_curry4:\n  prologue\n  L107:\n  {arg/29[%rax]* clos/30[%rbx]*}\n  V/31[%rdi] := alloc 48\n  [V/31[%rdi] + -8] := 5367 (init)\n  I/32[%rsi] := \"caml_curry4_1\"\n  val[V/31[%rdi]] := I/32[%rsi] (init)\n  [V/31[%rdi] + 8] := 7 (init)\n  I/33[%rsi] := \"caml_curry4_1_app\"\n  val[V/31[%rdi] + 16] := I/33[%rsi] (init)\n  val[V/31[%rdi] + 24] := arg/29[%rax] (init)\n  val[V/31[%rdi] + 32] := clos/30[%rbx] (init)\n  R/0[%rax] := V/31[%rdi]\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncaml_program:\n  prologue\n  L106:\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  I/29[%rax] := \"caml_globals_inited\"\n  [I/29[%rax]] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  I/30[%rax] := \"caml_globals_inited\"\n  [I/30[%rax]] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  I/31[%rax] := \"caml_globals_inited\"\n  [I/31[%rax]] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  I/32[%rax] := \"caml_globals_inited\"\n  [I/32[%rax]] +:= 1\n  I/33[%rax] := 1\n  reload retaddr\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncamlAsmgen_flags__kas_80: {asmgen_flags.ml:6,8-34}\n  L100:\n  I/30[%rax] := 3\n  return R/0[%rax]\n  \n",
     "*** After instruction scheduling\ncamlAsmgen_flags__entry:\n  L101:\n  kas/29[%rax] := \"camlAsmgen_flags__1\"\n  I/30[%rbx] := \"camlAsmgen_flags\"\n  val[I/30[%rbx]] := kas/29[%rax] (init)\n  I/31[%rax] := 1\n  return R/0[%rax]\n  \n"
    ],
 "dump_selection":
    ["*** After instruction selection\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  V/32 := val[clos/31 + 8]\n  { + V/32}\n  if V/32 ==s 5 then\n    { + clos/31}\n    V/36 := val[clos/31 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    { + clos/31}\n    V/33 := val[clos/31]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/31}\n    R/1[%rbx] := clos/31\n    { + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    { + clos/34}\n    V/35 := val[clos/34]\n    { + arg/30}\n    R/0[%rax] := arg/30\n    { + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After instruction selection\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  V/33 := val[clos/32 + 8]\n  { + V/33}\n  if V/33 ==s 7 then\n    { + clos/32}\n    V/39 := val[clos/32 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + arg/31}\n    R/2[%rdi] := arg/31\n    { + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    { + clos/32}\n    V/34 := val[clos/32]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/32}\n    R/1[%rbx] := clos/32\n    { + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    { + clos/35}\n    V/36 := val[clos/35]\n    { + arg/30}\n    R/0[%rax] := arg/30\n    { + clos/35}\n    R/1[%rbx] := clos/35\n    { + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    { + clos/37}\n    V/38 := val[clos/37]\n    { + arg/31}\n    R/0[%rax] := arg/31\n    { + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After instruction selection\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/30}\n  V/32 := val[clos/30 + 16]\n  { + clos/31}\n  V/33 := val[clos/31 + 16]\n  { + V/32}\n  R/0[%rax] := V/32\n  { + arg/29}\n  R/1[%rbx] := arg/29\n  { + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After instruction selection\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry2_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/30}\n  V/33 := val[clos/30 + 16]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + V/33}\n  R/1[%rbx] := V/33\n  { + arg/29}\n  R/2[%rdi] := arg/29\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After instruction selection\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry3_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/31}\n  V/33 := val[clos/31 + 24]\n  { + clos/32}\n  V/34 := val[clos/32 + 16]\n  { + V/33}\n  R/0[%rax] := V/33\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After instruction selection\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry3_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry3_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/30}\n  V/34 := val[clos/30 + 16]\n  { + clos/31}\n  V/35 := val[clos/31 + 24]\n  { + clos/32}\n  V/36 := val[clos/32 + 24]\n  { + clos/33}\n  V/37 := val[clos/33 + 16]\n  { + V/36}\n  R/0[%rax] := V/36\n  { + V/35}\n  R/1[%rbx] := V/35\n  { + V/34}\n  R/2[%rdi] := V/34\n  { + arg/29}\n  R/3[%rsi] := arg/29\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After instruction selection\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry4_3\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 24]\n  { + clos/33}\n  V/36 := val[clos/33 + 16]\n  { + V/35}\n  R/0[%rax] := V/35\n  { + V/34}\n  R/1[%rbx] := V/34\n  { + arg3/29}\n  R/2[%rdi] := arg3/29\n  { + arg4/30}\n  R/3[%rsi] := arg4/30\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After instruction selection\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry4_2_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/32}\n  V/34 := val[clos/32 + 24]\n  { + clos/33}\n  V/35 := val[clos/33 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + arg4/31}\n  R/3[%rsi] := arg4/31\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After instruction selection\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 7 (init)\n  {}\n  I/33 := \"caml_curry4_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  { + R/0[%rax]}\n  a/29 := R/0[%rax]\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After instruction selection\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_spill":
    ["*** After spilling\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {R/2[%rdi] arg/29* + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  {arg/29* arg/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg/29* arg/30* clos/31* + clos/31}\n  V/32 := val[clos/31 + 8]\n  {arg/29* arg/30* clos/31* + V/32}\n  if V/32 ==s 5 then\n    {arg/29* arg/30* clos/31* + clos/31}\n    V/36 := val[clos/31 + 16]\n    {arg/30* clos/31* V/36* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] clos/31* V/36* + arg/30}\n    R/1[%rbx] := arg/30\n    {R/0[%rax] R/1[%rbx] V/36* + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    {arg/29* clos/31* + arg/30}\n    spilled-arg/37 := arg/30 (spill)\n    {arg/29* clos/31* spilled-arg/37* + clos/31}\n    V/33 := val[clos/31]\n    {clos/31* V/33* spilled-arg/37* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] V/33* spilled-arg/37* + clos/31}\n    R/1[%rbx] := clos/31\n    {spilled-arg/37* + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    {spilled-arg/37* + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    {clos/34* spilled-arg/37* + clos/34}\n    V/35 := val[clos/34]\n    {clos/34* V/35* + spilled-arg/37}\n    arg/30 := spilled-arg/37 (reload)\n    {clos/34* V/35* + arg/30}\n    R/0[%rax] := arg/30\n    {R/0[%rax] V/35* + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After spilling\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg/29* + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  {R/3[%rsi] arg/29* arg/30* + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  {arg/29* arg/30* arg/31* + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  {arg/29* arg/30* arg/31* clos/32* + clos/32}\n  V/33 := val[clos/32 + 8]\n  {arg/29* arg/30* arg/31* clos/32* + V/33}\n  if V/33 ==s 7 then\n    {arg/29* arg/30* arg/31* clos/32* + clos/32}\n    V/39 := val[clos/32 + 16]\n    {arg/30* arg/31* clos/32* V/39* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] arg/31* clos/32* V/39* + arg/30}\n    R/1[%rbx] := arg/30\n    {R/0[%rax] R/1[%rbx] clos/32* V/39* + arg/31}\n    R/2[%rdi] := arg/31\n    {R/0[%rax] R/1[%rbx] R/2[%rdi] V/39* + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    {arg/29* arg/30* clos/32* + arg/31}\n    spilled-arg/40 := arg/31 (spill)\n    {arg/29* clos/32* spilled-arg/40* + arg/30}\n    spilled-arg/41 := arg/30 (spill)\n    {arg/29* clos/32* spilled-arg/40* spilled-arg/41* + clos/32}\n    V/34 := val[clos/32]\n    {clos/32* V/34* spilled-arg/40* spilled-arg/41* + arg/29}\n    R/0[%rax] := arg/29\n    {R/0[%rax] V/34* spilled-arg/40* spilled-arg/41* + clos/32}\n    R/1[%rbx] := clos/32\n    {spilled-arg/40* spilled-arg/41* + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    {spilled-arg/40* spilled-arg/41* + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    {clos/35* spilled-arg/40* spilled-arg/41* + clos/35}\n    V/36 := val[clos/35]\n    {clos/35* V/36* spilled-arg/40* + spilled-arg/41}\n    arg/30 := spilled-arg/41 (reload)\n    {clos/35* V/36* spilled-arg/40* + arg/30}\n    R/0[%rax] := arg/30\n    {R/0[%rax] V/36* spilled-arg/40* + clos/35}\n    R/1[%rbx] := clos/35\n    {spilled-arg/40* + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    {spilled-arg/40* + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    {clos/37* spilled-arg/40* + clos/37}\n    V/38 := val[clos/37]\n    {clos/37* V/38* + spilled-arg/40}\n    arg/31 := spilled-arg/40 (reload)\n    {clos/37* V/38* + arg/31}\n    R/0[%rax] := arg/31\n    {R/0[%rax] V/38* + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After spilling\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/31* + clos/30}\n  V/32 := val[clos/30 + 16]\n  {arg/29* clos/31* V/32* + clos/31}\n  V/33 := val[clos/31 + 16]\n  {arg/29* clos/31* V/33* + V/32}\n  R/0[%rax] := V/32\n  {R/0[%rax] clos/31* V/33* + arg/29}\n  R/1[%rbx] := arg/29\n  {R/0[%rax] R/1[%rbx] V/33* + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After spilling\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry2_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg/29* clos/31* clos/32* + clos/30}\n  V/33 := val[clos/30 + 16]\n  {arg/29* clos/32* V/33* + clos/31}\n  V/34 := val[clos/31 + 24]\n  {arg/29* clos/32* V/33* V/34* + clos/32}\n  V/35 := val[clos/32 + 16]\n  {arg/29* clos/32* V/33* V/35* + V/34}\n  R/0[%rax] := V/34\n  {R/0[%rax] arg/29* clos/32* V/35* + V/33}\n  R/1[%rbx] := V/33\n  {R/0[%rax] R/1[%rbx] clos/32* V/35* + arg/29}\n  R/2[%rdi] := arg/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/35* + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After spilling\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry3_2\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  {R/2[%rdi] arg2/29* + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  {arg2/29* arg3/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg2/29* arg3/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg2/29* arg3/30* clos/32* + clos/31}\n  V/33 := val[clos/31 + 24]\n  {arg2/29* arg3/30* clos/32* V/33* + clos/32}\n  V/34 := val[clos/32 + 16]\n  {arg2/29* arg3/30* clos/32* V/34* + V/33}\n  R/0[%rax] := V/33\n  {R/0[%rax] arg3/30* clos/32* V/34* + arg2/29}\n  R/1[%rbx] := arg2/29\n  {R/0[%rax] R/1[%rbx] clos/32* V/34* + arg3/30}\n  R/2[%rdi] := arg3/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] V/34* + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After spilling\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry3_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 5 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry3_1_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30* + clos/30}\n  clos/31 := val[clos/30 + 24]\n  {arg/29* clos/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg/29* clos/30* clos/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg/29* clos/31* clos/32* clos/33* + clos/30}\n  V/34 := val[clos/30 + 16]\n  {arg/29* clos/32* clos/33* V/34* + clos/31}\n  V/35 := val[clos/31 + 24]\n  {arg/29* clos/33* V/34* V/35* + clos/32}\n  V/36 := val[clos/32 + 24]\n  {arg/29* clos/33* V/34* V/35* V/36* + clos/33}\n  V/37 := val[clos/33 + 16]\n  {arg/29* clos/33* V/34* V/35* V/37* + V/36}\n  R/0[%rax] := V/36\n  {R/0[%rax] arg/29* clos/33* V/34* V/37* + V/35}\n  R/1[%rbx] := V/35\n  {R/0[%rax] R/1[%rbx] arg/29* clos/33* V/37* + V/34}\n  R/2[%rdi] := V/34\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/37* + arg/29}\n  R/3[%rsi] := arg/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/37* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After spilling\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 40\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 4343 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_3\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 3 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  {R/1[%rbx] R/2[%rdi] + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  {R/2[%rdi] arg3/29* + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  {arg3/29* arg4/30* + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  {arg3/29* arg4/30* clos/31* + clos/31}\n  clos/32 := val[clos/31 + 32]\n  {arg3/29* arg4/30* clos/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg3/29* arg4/30* clos/32* clos/33* + clos/31}\n  V/34 := val[clos/31 + 24]\n  {arg3/29* arg4/30* clos/33* V/34* + clos/32}\n  V/35 := val[clos/32 + 24]\n  {arg3/29* arg4/30* clos/33* V/34* V/35* + clos/33}\n  V/36 := val[clos/33 + 16]\n  {arg3/29* arg4/30* clos/33* V/34* V/36* + V/35}\n  R/0[%rax] := V/35\n  {R/0[%rax] arg3/29* arg4/30* clos/33* V/36* + V/34}\n  R/1[%rbx] := V/34\n  {R/0[%rax] R/1[%rbx] arg4/30* clos/33* V/36* + arg3/29}\n  R/2[%rdi] := arg3/29\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/36* + arg4/30}\n  R/3[%rsi] := arg4/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/36* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After spilling\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_2\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 5 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry4_2_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  {R/1[%rbx] R/2[%rdi] R/3[%rsi] + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  {R/2[%rdi] R/3[%rsi] arg2/29* + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  {R/3[%rsi] arg2/29* arg3/30* + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  {arg2/29* arg3/30* arg4/31* + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  {arg2/29* arg3/30* arg4/31* clos/32* + clos/32}\n  clos/33 := val[clos/32 + 32]\n  {arg2/29* arg3/30* arg4/31* clos/33* + clos/32}\n  V/34 := val[clos/32 + 24]\n  {arg2/29* arg3/30* arg4/31* clos/33* V/34* + clos/33}\n  V/35 := val[clos/33 + 16]\n  {arg2/29* arg3/30* arg4/31* clos/33* V/35* + V/34}\n  R/0[%rax] := V/34\n  {R/0[%rax] arg3/30* arg4/31* clos/33* V/35* + arg2/29}\n  R/1[%rbx] := arg2/29\n  {R/0[%rax] R/1[%rbx] arg4/31* clos/33* V/35* + arg3/30}\n  R/2[%rdi] := arg3/30\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] clos/33* V/35* + arg4/31}\n  R/3[%rsi] := arg4/31\n  {R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] V/35* + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After spilling\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  {R/1[%rbx] + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  {arg/29* + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {arg/29* clos/30*}\n  V/31 := alloc 48\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + -8] := 5367 (init)\n  {arg/29* clos/30* V/31*}\n  I/32 := \"caml_curry4_1\"\n  {arg/29* clos/30* V/31* + I/32 V/31}\n  val[V/31] := I/32 (init)\n  {arg/29* clos/30* V/31* + V/31}\n  [V/31 + 8] := 7 (init)\n  {arg/29* clos/30* V/31*}\n  I/33 := \"caml_curry4_1_app\"\n  {arg/29* clos/30* V/31* + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  {clos/30* V/31* + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  {V/31* + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After spilling\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {kas/29}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "dump_split":
    ["*** After live range splitting\ncaml_apply2(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  V/32 := val[clos/31 + 8]\n  { + V/32}\n  if V/32 ==s 5 then\n    { + clos/31}\n    V/36 := val[clos/31 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + clos/31}\n    R/2[%rdi] := clos/31\n    { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n    tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi]\n  else\n    { + arg/30}\n    spilled-arg/37 := arg/30 (spill)\n    { + clos/31}\n    V/33 := val[clos/31]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/31}\n    R/1[%rbx] := clos/31\n    { + V/33 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/33 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/34 := R/0[%rax]\n    { + clos/34}\n    V/35 := val[clos/34]\n    { + spilled-arg/37}\n    arg/38 := spilled-arg/37 (reload)\n    { + arg/38}\n    R/0[%rax] := arg/38\n    { + clos/34}\n    R/1[%rbx] := clos/34\n    { + V/35 R/0[%rax] R/1[%rbx]}\n    tailcall V/35 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After live range splitting\ncaml_apply3(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  V/33 := val[clos/32 + 8]\n  { + V/33}\n  if V/33 ==s 7 then\n    { + clos/32}\n    V/39 := val[clos/32 + 16]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + arg/30}\n    R/1[%rbx] := arg/30\n    { + arg/31}\n    R/2[%rdi] := arg/31\n    { + clos/32}\n    R/3[%rsi] := clos/32\n    { + V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n    tailcall V/39 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n  else\n    { + arg/31}\n    spilled-arg/40 := arg/31 (spill)\n    { + arg/30}\n    spilled-arg/41 := arg/30 (spill)\n    { + clos/32}\n    V/34 := val[clos/32]\n    { + arg/29}\n    R/0[%rax] := arg/29\n    { + clos/32}\n    R/1[%rbx] := clos/32\n    { + V/34 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/34 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/35 := R/0[%rax]\n    { + clos/35}\n    V/36 := val[clos/35]\n    { + spilled-arg/41}\n    arg/42 := spilled-arg/41 (reload)\n    { + arg/42}\n    R/0[%rax] := arg/42\n    { + clos/35}\n    R/1[%rbx] := clos/35\n    { + V/36 R/0[%rax] R/1[%rbx]}\n    R/0[%rax] := call V/36 R/0[%rax] R/1[%rbx]\n    { + R/0[%rax]}\n    clos/37 := R/0[%rax]\n    { + clos/37}\n    V/38 := val[clos/37]\n    { + spilled-arg/40}\n    arg/43 := spilled-arg/40 (reload)\n    { + arg/43}\n    R/0[%rax] := arg/43\n    { + clos/37}\n    R/1[%rbx] := clos/37\n    { + V/38 R/0[%rax] R/1[%rbx]}\n    tailcall V/38 R/0[%rax] R/1[%rbx]\n  endif\n\n",
     "*** After live range splitting\ncaml_curry2_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/30}\n  V/32 := val[clos/30 + 16]\n  { + clos/31}\n  V/33 := val[clos/31 + 16]\n  { + V/32}\n  R/0[%rax] := V/32\n  { + arg/29}\n  R/1[%rbx] := arg/29\n  { + clos/31}\n  R/2[%rdi] := clos/31\n  { + V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]}\n  tailcall V/33 R/0[%rax] R/1[%rbx] R/2[%rdi]\n\n",
     "*** After live range splitting\ncaml_curry2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry2_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncaml_curry3_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/30}\n  V/33 := val[clos/30 + 16]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + V/33}\n  R/1[%rbx] := V/33\n  { + arg/29}\n  R/2[%rdi] := arg/29\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After live range splitting\ncaml_curry3_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry3_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncaml_curry3_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/31}\n  V/33 := val[clos/31 + 24]\n  { + clos/32}\n  V/34 := val[clos/32 + 16]\n  { + V/33}\n  R/0[%rax] := V/33\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + clos/32}\n  R/3[%rsi] := clos/32\n  { + V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]}\n  tailcall V/34 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi]\n\n",
     "*** After live range splitting\ncaml_curry3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry3_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry3_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncaml_curry4_3(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  { + clos/30}\n  clos/31 := val[clos/30 + 24]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/30}\n  V/34 := val[clos/30 + 16]\n  { + clos/31}\n  V/35 := val[clos/31 + 24]\n  { + clos/32}\n  V/36 := val[clos/32 + 24]\n  { + clos/33}\n  V/37 := val[clos/33 + 16]\n  { + V/36}\n  R/0[%rax] := V/36\n  { + V/35}\n  R/1[%rbx] := V/35\n  { + V/34}\n  R/2[%rdi] := V/34\n  { + arg/29}\n  R/3[%rsi] := arg/29\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/37 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After live range splitting\ncaml_curry4_2(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 40\n  { + V/31}\n  [V/31 + -8] := 4343 (init)\n  {}\n  I/32 := \"caml_curry4_3\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 3 (init)\n  { + arg/29 V/31}\n  val[V/31 + 16] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 24] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncaml_curry4_2_app(R/0[%rax] R/1[%rbx] R/2[%rdi])\n  { + R/0[%rax]}\n  arg3/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg4/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  clos/31 := R/2[%rdi]\n  { + clos/31}\n  clos/32 := val[clos/31 + 32]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/31}\n  V/34 := val[clos/31 + 24]\n  { + clos/32}\n  V/35 := val[clos/32 + 24]\n  { + clos/33}\n  V/36 := val[clos/33 + 16]\n  { + V/35}\n  R/0[%rax] := V/35\n  { + V/34}\n  R/1[%rbx] := V/34\n  { + arg3/29}\n  R/2[%rdi] := arg3/29\n  { + arg4/30}\n  R/3[%rsi] := arg4/30\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/36 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After live range splitting\ncaml_curry4_1(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_2\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 5 (init)\n  {}\n  I/33 := \"caml_curry4_2_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncaml_curry4_1_app(R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi])\n  { + R/0[%rax]}\n  arg2/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  arg3/30 := R/1[%rbx]\n  { + R/2[%rdi]}\n  arg4/31 := R/2[%rdi]\n  { + R/3[%rsi]}\n  clos/32 := R/3[%rsi]\n  { + clos/32}\n  clos/33 := val[clos/32 + 32]\n  { + clos/32}\n  V/34 := val[clos/32 + 24]\n  { + clos/33}\n  V/35 := val[clos/33 + 16]\n  { + V/34}\n  R/0[%rax] := V/34\n  { + arg2/29}\n  R/1[%rbx] := arg2/29\n  { + arg3/30}\n  R/2[%rdi] := arg3/30\n  { + arg4/31}\n  R/3[%rsi] := arg4/31\n  { + clos/33}\n  R/4[%rdx] := clos/33\n  { + V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]}\n  tailcall V/35 R/0[%rax] R/1[%rbx] R/2[%rdi] R/3[%rsi] R/4[%rdx]\n\n",
     "*** After live range splitting\ncaml_curry4(R/0[%rax] R/1[%rbx])\n  { + R/0[%rax]}\n  arg/29 := R/0[%rax]\n  { + R/1[%rbx]}\n  clos/30 := R/1[%rbx]\n  {}\n  V/31 := alloc 48\n  { + V/31}\n  [V/31 + -8] := 5367 (init)\n  {}\n  I/32 := \"caml_curry4_1\"\n  { + I/32 V/31}\n  val[V/31] := I/32 (init)\n  { + V/31}\n  [V/31 + 8] := 7 (init)\n  {}\n  I/33 := \"caml_curry4_1_app\"\n  { + I/33 V/31}\n  val[V/31 + 16] := I/33 (init)\n  { + arg/29 V/31}\n  val[V/31 + 24] := arg/29 (init)\n  { + clos/30 V/31}\n  val[V/31 + 32] := clos/30 (init)\n  { + V/31}\n  R/0[%rax] := V/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncaml_program()\n  {}\n  call \"camlCamlinternalFormatBasics__entry\" \n  {}\n  I/29 := \"caml_globals_inited\"\n  { + I/29}\n  [I/29] +:= 1\n  {}\n  call \"camlStdlib__entry\" \n  {}\n  I/30 := \"caml_globals_inited\"\n  { + I/30}\n  [I/30] +:= 1\n  {}\n  call \"camlAsmgen_flags__entry\" \n  {}\n  I/31 := \"caml_globals_inited\"\n  { + I/31}\n  [I/31] +:= 1\n  {}\n  call \"camlStd_exit__entry\" \n  {}\n  I/32 := \"caml_globals_inited\"\n  { + I/32}\n  [I/32] +:= 1\n  {}\n  I/33 := 1\n  { + I/33}\n  R/0[%rax] := I/33\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncamlAsmgen_flags__kas_80(R/0[%rax]) {asmgen_flags.ml:6,8-34}\n  {}\n  I/30 := 3\n  { + I/30}\n  R/0[%rax] := I/30\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n",
     "*** After live range splitting\ncamlAsmgen_flags__entry()\n  {}\n  kas/29 := \"camlAsmgen_flags__1\"\n  {}\n  I/30 := \"camlAsmgen_flags\"\n  { + kas/29 I/30}\n  val[I/30] := kas/29 (init)\n  {}\n  I/31 := 1\n  { + I/31}\n  R/0[%rax] := I/31\n  { + R/0[%rax]}\n  return R/0[%rax]\n\n"
    ],
 "parsetree":
    "[\n  structure_item (asmgen_flags.ml[6,212+0]..[6,212+34])\n    Pstr_value Nonrec\n    [\n      <def>\n        pattern (asmgen_flags.ml[6,212+4]..[6,212+7])\n          Ppat_var \"kas\" (asmgen_flags.ml[6,212+4]..[6,212+7])\n        expression (asmgen_flags.ml[6,212+8]..[6,212+34]) ghost\n          Pexp_fun\n          Nolabel\n          None\n          pattern (asmgen_flags.ml[6,212+8]..[6,212+9])\n            Ppat_var \"a\" (asmgen_flags.ml[6,212+8]..[6,212+9])\n          expression (asmgen_flags.ml[6,212+12]..[6,212+34])\n            Pexp_match\n            expression (asmgen_flags.ml[6,212+18]..[6,212+19])\n              Pexp_ident \"a\" (asmgen_flags.ml[6,212+18]..[6,212+19])\n            [\n              <case>\n                pattern (asmgen_flags.ml[6,212+25]..[6,212+26])\n                  Ppat_any\n                expression (asmgen_flags.ml[6,212+30]..[6,212+34])\n                  Pexp_construct \"true\" (asmgen_flags.ml[6,212+30]..[6,212+34])\n                  None\n            ]\n    ]\n]\n\n",
 "source": "let kas a = match a with | _ -> true\n",
 "typedtree":
    "[\n  structure_item (asmgen_flags.ml[6,212+0]..asmgen_flags.ml[6,212+34])\n    Tstr_value Nonrec\n    [\n      <def>\n        pattern (asmgen_flags.ml[6,212+4]..asmgen_flags.ml[6,212+7])\n          Tpat_var \"kas/80\"\n        expression (asmgen_flags.ml[6,212+8]..asmgen_flags.ml[6,212+34]) ghost\n          Texp_function\n          Nolabel\n          [\n            <case>\n              pattern (asmgen_flags.ml[6,212+8]..asmgen_flags.ml[6,212+9])\n                Tpat_var \"a/82\"\n              expression (asmgen_flags.ml[6,212+12]..asmgen_flags.ml[6,212+34])\n                Texp_match\n                expression (asmgen_flags.ml[6,212+18]..asmgen_flags.ml[6,212+19])\n                  Texp_ident \"a/82\"\n                [\n                  <case>\n                    pattern (asmgen_flags.ml[6,212+25]..asmgen_flags.ml[6,212+26])\n                      Tpat_value\n                      pattern (asmgen_flags.ml[6,212+25]..asmgen_flags.ml[6,212+26])\n                        Tpat_any\n                    expression (asmgen_flags.ml[6,212+30]..asmgen_flags.ml[6,212+34])\n                      Texp_construct \"true\"\n                      []\n                ]\n          ]\n    ]\n]\n\n"
}
